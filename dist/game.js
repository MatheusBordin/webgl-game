!function(t){var e=window.webpackHotUpdate;window.webpackHotUpdate=function(t,r){!function(t,e){if(!b[t]||!v[t])return;for(var r in v[t]=!1,e)Object.prototype.hasOwnProperty.call(e,r)&&(p[r]=e[r]);0==--g&&0===x&&_()}(t,r),e&&e(t,r)};var r,n=!0,i="3f3e3058aaa7ada44896",o=1e4,a={},s=[],c=[];function h(t){var e=A[t];if(!e)return T;var n=function(n){return e.hot.active?(A[n]?-1===A[n].parents.indexOf(t)&&A[n].parents.push(t):(s=[t],r=n),-1===e.children.indexOf(n)&&e.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+t),s=[]),T(n)},i=function(t){return{configurable:!0,enumerable:!0,get:function(){return T[t]},set:function(e){T[t]=e}}};for(var o in T)Object.prototype.hasOwnProperty.call(T,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(n,o,i(o));return n.e=function(t){return"ready"===l&&d("prepare"),x++,T.e(t).then(e,function(t){throw e(),t});function e(){x--,"prepare"===l&&(M[t]||P(t),0===x&&0===g&&_())}},n.t=function(t,e){return 1&e&&(t=n(t)),T.t(t,-2&e)},n}var u=[],l="idle";function d(t){l=t;for(var e=0;e<u.length;e++)u[e].call(null,t)}var f,p,m,g=0,x=0,M={},v={},b={};function y(t){return+t+""===t?+t:t}function w(t){if("idle"!==l)throw new Error("check() is only allowed in idle status");return n=t,d("check"),function(t){return t=t||1e4,new Promise(function(e,r){if("undefined"==typeof XMLHttpRequest)return r(new Error("No browser support"));try{var n=new XMLHttpRequest,o=T.p+""+i+".hot-update.json";n.open("GET",o,!0),n.timeout=t,n.send(null)}catch(t){return r(t)}n.onreadystatechange=function(){if(4===n.readyState)if(0===n.status)r(new Error("Manifest request to "+o+" timed out."));else if(404===n.status)e();else if(200!==n.status&&304!==n.status)r(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(n.responseText)}catch(t){return void r(t)}e(t)}}})}(o).then(function(t){if(!t)return d("idle"),null;v={},M={},b=t.c,m=t.h,d("prepare");var e=new Promise(function(t,e){f={resolve:t,reject:e}});p={};return P(0),"prepare"===l&&0===x&&0===g&&_(),e})}function P(t){b[t]?(v[t]=!0,g++,function(t){var e=document.getElementsByTagName("head")[0],r=document.createElement("script");r.charset="utf-8",r.src=T.p+""+t+"."+i+".hot-update.js",e.appendChild(r)}(t)):M[t]=!0}function _(){d("ready");var t=f;if(f=null,t)if(n)Promise.resolve().then(function(){return E(n)}).then(function(e){t.resolve(e)},function(e){t.reject(e)});else{var e=[];for(var r in p)Object.prototype.hasOwnProperty.call(p,r)&&e.push(y(r));t.resolve(e)}}function E(e){if("ready"!==l)throw new Error("apply() is only allowed in ready status");var r,n,o,c,h;function u(t){for(var e=[t],r={},n=e.slice().map(function(t){return{chain:[t],id:t}});n.length>0;){var i=n.pop(),o=i.id,a=i.chain;if((c=A[o])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(c.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var s=0;s<c.parents.length;s++){var h=c.parents[s],u=A[h];if(u){if(u.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([h]),moduleId:o,parentId:h};-1===e.indexOf(h)&&(u.hot._acceptedDependencies[o]?(r[h]||(r[h]=[]),f(r[h],[o])):(delete r[h],e.push(h),n.push({chain:a.concat([h]),id:h})))}}}}return{type:"accepted",moduleId:t,outdatedModules:e,outdatedDependencies:r}}function f(t,e){for(var r=0;r<e.length;r++){var n=e[r];-1===t.indexOf(n)&&t.push(n)}}e=e||{};var g={},x=[],M={},v=function(){console.warn("[HMR] unexpected require("+P.moduleId+") to disposed module")};for(var w in p)if(Object.prototype.hasOwnProperty.call(p,w)){var P;h=y(w);var _=!1,E=!1,R=!1,S="";switch((P=p[w]?u(h):{type:"disposed",moduleId:w}).chain&&(S="\nUpdate propagation: "+P.chain.join(" -> ")),P.type){case"self-declined":e.onDeclined&&e.onDeclined(P),e.ignoreDeclined||(_=new Error("Aborted because of self decline: "+P.moduleId+S));break;case"declined":e.onDeclined&&e.onDeclined(P),e.ignoreDeclined||(_=new Error("Aborted because of declined dependency: "+P.moduleId+" in "+P.parentId+S));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(P),e.ignoreUnaccepted||(_=new Error("Aborted because "+h+" is not accepted"+S));break;case"accepted":e.onAccepted&&e.onAccepted(P),E=!0;break;case"disposed":e.onDisposed&&e.onDisposed(P),R=!0;break;default:throw new Error("Unexception type "+P.type)}if(_)return d("abort"),Promise.reject(_);if(E)for(h in M[h]=p[h],f(x,P.outdatedModules),P.outdatedDependencies)Object.prototype.hasOwnProperty.call(P.outdatedDependencies,h)&&(g[h]||(g[h]=[]),f(g[h],P.outdatedDependencies[h]));R&&(f(x,[P.moduleId]),M[h]=v)}var C,z=[];for(n=0;n<x.length;n++)h=x[n],A[h]&&A[h].hot._selfAccepted&&z.push({module:h,errorHandler:A[h].hot._selfAccepted});d("dispose"),Object.keys(b).forEach(function(t){!1===b[t]&&function(t){delete installedChunks[t]}(t)});for(var L,k,B=x.slice();B.length>0;)if(h=B.pop(),c=A[h]){var D={},I=c.hot._disposeHandlers;for(o=0;o<I.length;o++)(r=I[o])(D);for(a[h]=D,c.hot.active=!1,delete A[h],delete g[h],o=0;o<c.children.length;o++){var F=A[c.children[o]];F&&((C=F.parents.indexOf(h))>=0&&F.parents.splice(C,1))}}for(h in g)if(Object.prototype.hasOwnProperty.call(g,h)&&(c=A[h]))for(k=g[h],o=0;o<k.length;o++)L=k[o],(C=c.children.indexOf(L))>=0&&c.children.splice(C,1);for(h in d("apply"),i=m,M)Object.prototype.hasOwnProperty.call(M,h)&&(t[h]=M[h]);var U=null;for(h in g)if(Object.prototype.hasOwnProperty.call(g,h)&&(c=A[h])){k=g[h];var O=[];for(n=0;n<k.length;n++)if(L=k[n],r=c.hot._acceptedDependencies[L]){if(-1!==O.indexOf(r))continue;O.push(r)}for(n=0;n<O.length;n++){r=O[n];try{r(k)}catch(t){e.onErrored&&e.onErrored({type:"accept-errored",moduleId:h,dependencyId:k[n],error:t}),e.ignoreErrored||U||(U=t)}}}for(n=0;n<z.length;n++){var V=z[n];h=V.module,s=[h];try{T(h)}catch(t){if("function"==typeof V.errorHandler)try{V.errorHandler(t)}catch(r){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:h,error:r,originalError:t}),e.ignoreErrored||U||(U=r),U||(U=t)}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:h,error:t}),e.ignoreErrored||U||(U=t)}}return U?(d("fail"),Promise.reject(U)):(d("idle"),new Promise(function(t){t(x)}))}var A={};function T(e){if(A[e])return A[e].exports;var n=A[e]={i:e,l:!1,exports:{},hot:function(t){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:r!==t,active:!0,accept:function(t,r){if(void 0===t)e._selfAccepted=!0;else if("function"==typeof t)e._selfAccepted=t;else if("object"==typeof t)for(var n=0;n<t.length;n++)e._acceptedDependencies[t[n]]=r||function(){};else e._acceptedDependencies[t]=r||function(){}},decline:function(t){if(void 0===t)e._selfDeclined=!0;else if("object"==typeof t)for(var r=0;r<t.length;r++)e._declinedDependencies[t[r]]=!0;else e._declinedDependencies[t]=!0},dispose:function(t){e._disposeHandlers.push(t)},addDisposeHandler:function(t){e._disposeHandlers.push(t)},removeDisposeHandler:function(t){var r=e._disposeHandlers.indexOf(t);r>=0&&e._disposeHandlers.splice(r,1)},check:w,apply:E,status:function(t){if(!t)return l;u.push(t)},addStatusHandler:function(t){u.push(t)},removeStatusHandler:function(t){var e=u.indexOf(t);e>=0&&u.splice(e,1)},data:a[t]};return r=void 0,e}(e),parents:(c=s,s=[],c),children:[]};return t[e].call(n.exports,n,n.exports,h(e)),n.l=!0,n.exports}T.m=t,T.c=A,T.d=function(t,e,r){T.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},T.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},T.t=function(t,e){if(1&e&&(t=T(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(T.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)T.d(r,n,function(e){return t[e]}.bind(null,n));return r},T.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return T.d(e,"a",e),e},T.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},T.p="",T.h=function(){return i},h(7)(T.s=7)}({7:function(t,e,r){"use strict";r.r(e);var n={};r.r(n),r.d(n,"create",function(){return h}),r.d(n,"clone",function(){return u}),r.d(n,"copy",function(){return l}),r.d(n,"fromValues",function(){return d}),r.d(n,"set",function(){return f}),r.d(n,"identity",function(){return p}),r.d(n,"transpose",function(){return m}),r.d(n,"invert",function(){return g}),r.d(n,"adjoint",function(){return x}),r.d(n,"determinant",function(){return M}),r.d(n,"multiply",function(){return v}),r.d(n,"translate",function(){return b}),r.d(n,"scale",function(){return y}),r.d(n,"rotate",function(){return w}),r.d(n,"rotateX",function(){return P}),r.d(n,"rotateY",function(){return _}),r.d(n,"rotateZ",function(){return E}),r.d(n,"fromTranslation",function(){return A}),r.d(n,"fromScaling",function(){return T}),r.d(n,"fromRotation",function(){return R}),r.d(n,"fromXRotation",function(){return S}),r.d(n,"fromYRotation",function(){return C}),r.d(n,"fromZRotation",function(){return z}),r.d(n,"fromRotationTranslation",function(){return L}),r.d(n,"fromQuat2",function(){return k}),r.d(n,"getTranslation",function(){return B}),r.d(n,"getScaling",function(){return D}),r.d(n,"getRotation",function(){return I}),r.d(n,"fromRotationTranslationScale",function(){return F}),r.d(n,"fromRotationTranslationScaleOrigin",function(){return U}),r.d(n,"fromQuat",function(){return O}),r.d(n,"frustum",function(){return V}),r.d(n,"perspective",function(){return j}),r.d(n,"perspectiveFromFieldOfView",function(){return q}),r.d(n,"ortho",function(){return N}),r.d(n,"lookAt",function(){return H}),r.d(n,"targetTo",function(){return Y}),r.d(n,"str",function(){return X}),r.d(n,"frob",function(){return G}),r.d(n,"add",function(){return W}),r.d(n,"subtract",function(){return K}),r.d(n,"multiplyScalar",function(){return Q}),r.d(n,"multiplyScalarAndAdd",function(){return Z}),r.d(n,"exactEquals",function(){return $}),r.d(n,"equals",function(){return J}),r.d(n,"mul",function(){return tt}),r.d(n,"sub",function(){return et});var i={};r.r(i),r.d(i,"create",function(){return rt}),r.d(i,"clone",function(){return nt}),r.d(i,"length",function(){return it}),r.d(i,"fromValues",function(){return ot}),r.d(i,"copy",function(){return at}),r.d(i,"set",function(){return st}),r.d(i,"add",function(){return ct}),r.d(i,"subtract",function(){return ht}),r.d(i,"multiply",function(){return ut}),r.d(i,"divide",function(){return lt}),r.d(i,"ceil",function(){return dt}),r.d(i,"floor",function(){return ft}),r.d(i,"min",function(){return pt}),r.d(i,"max",function(){return mt}),r.d(i,"round",function(){return gt}),r.d(i,"scale",function(){return xt}),r.d(i,"scaleAndAdd",function(){return Mt}),r.d(i,"distance",function(){return vt}),r.d(i,"squaredDistance",function(){return bt}),r.d(i,"squaredLength",function(){return yt}),r.d(i,"negate",function(){return wt}),r.d(i,"inverse",function(){return Pt}),r.d(i,"normalize",function(){return _t}),r.d(i,"dot",function(){return Et}),r.d(i,"cross",function(){return At}),r.d(i,"lerp",function(){return Tt}),r.d(i,"hermite",function(){return Rt}),r.d(i,"bezier",function(){return St}),r.d(i,"random",function(){return Ct}),r.d(i,"transformMat4",function(){return zt}),r.d(i,"transformMat3",function(){return Lt}),r.d(i,"transformQuat",function(){return kt}),r.d(i,"rotateX",function(){return Bt}),r.d(i,"rotateY",function(){return Dt}),r.d(i,"rotateZ",function(){return It}),r.d(i,"angle",function(){return Ft}),r.d(i,"str",function(){return Ut}),r.d(i,"exactEquals",function(){return Ot}),r.d(i,"equals",function(){return Vt}),r.d(i,"sub",function(){return jt}),r.d(i,"mul",function(){return qt}),r.d(i,"div",function(){return Nt}),r.d(i,"dist",function(){return Ht}),r.d(i,"sqrDist",function(){return Yt}),r.d(i,"len",function(){return Xt}),r.d(i,"sqrLen",function(){return Gt}),r.d(i,"forEach",function(){return Wt});class o{constructor(){this.isVirtualRender=!1,this.prevTime=0,this.objects=[];try{if(this.canvas=document.getElementById("game"),this.gl=this.canvas.getContext("webgl")||this.canvas.getContext("experimental-webgl"),this.requestPointerLock(),this.canvas.addEventListener("click",this.requestPointerLock.bind(this)),this.configureSize(),!this.gl)throw new Error("Unable to initialize WebGL. Your browser or machine may not support it.")}catch(t){console.log(t.message||t)}}get context(){return this.gl}get frameTime(){return this.prevTime}start(){this.render(0)}requestPointerLock(){const t=this.canvas;(t.requestPointerLock||t.webkitRequestPointerLock||t.mozRequestPointerLock||t.msRequestPointerLock||t.oRequestPointerLock||function(){}).call(t)}configureSize(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight}addObject(...t){this.objects.push(...t)}setCamera(t){this.camera=t}render(t){const e=.001*t,r=e-this.prevTime;this.prevTime=e,this.isVirtualRender?this.drawVirtual(r):this.draw(r),requestAnimationFrame(this.render.bind(this))}draw(t){this.gl.clearColor(104/255,203/255,241/255,1),this.gl.clearDepth(1),this.gl.enable(this.gl.DEPTH_TEST),this.gl.depthFunc(this.gl.LEQUAL),this.gl.viewport(0,0,window.innerWidth,window.innerHeight),this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT),this.camera.draw();for(const e of this.objects)e.draw(t)}drawVirtual(t){this.gl.clearColor(104/255,203/255,241/255,1),this.gl.clearDepth(1),this.gl.enable(this.gl.DEPTH_TEST),this.gl.depthFunc(this.gl.LEQUAL),this.gl.viewport(0,0,window.innerWidth,window.innerHeight),this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT),this.camera.drawVirtual();for(const e of this.objects)e.drawVirtual(t)}}var a=1e-6,s="undefined"!=typeof Float32Array?Float32Array:Array,c=Math.random;Math.PI;function h(){var t=new s(16);return s!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function u(t){var e=new s(16);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function l(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function d(t,e,r,n,i,o,a,c,h,u,l,d,f,p,m,g){var x=new s(16);return x[0]=t,x[1]=e,x[2]=r,x[3]=n,x[4]=i,x[5]=o,x[6]=a,x[7]=c,x[8]=h,x[9]=u,x[10]=l,x[11]=d,x[12]=f,x[13]=p,x[14]=m,x[15]=g,x}function f(t,e,r,n,i,o,a,s,c,h,u,l,d,f,p,m,g){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t[4]=o,t[5]=a,t[6]=s,t[7]=c,t[8]=h,t[9]=u,t[10]=l,t[11]=d,t[12]=f,t[13]=p,t[14]=m,t[15]=g,t}function p(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function m(t,e){if(t===e){var r=e[1],n=e[2],i=e[3],o=e[6],a=e[7],s=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=r,t[6]=e[9],t[7]=e[13],t[8]=n,t[9]=o,t[11]=e[14],t[12]=i,t[13]=a,t[14]=s}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function g(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],s=e[5],c=e[6],h=e[7],u=e[8],l=e[9],d=e[10],f=e[11],p=e[12],m=e[13],g=e[14],x=e[15],M=r*s-n*a,v=r*c-i*a,b=r*h-o*a,y=n*c-i*s,w=n*h-o*s,P=i*h-o*c,_=u*m-l*p,E=u*g-d*p,A=u*x-f*p,T=l*g-d*m,R=l*x-f*m,S=d*x-f*g,C=M*S-v*R+b*T+y*A-w*E+P*_;return C?(C=1/C,t[0]=(s*S-c*R+h*T)*C,t[1]=(i*R-n*S-o*T)*C,t[2]=(m*P-g*w+x*y)*C,t[3]=(d*w-l*P-f*y)*C,t[4]=(c*A-a*S-h*E)*C,t[5]=(r*S-i*A+o*E)*C,t[6]=(g*b-p*P-x*v)*C,t[7]=(u*P-d*b+f*v)*C,t[8]=(a*R-s*A+h*_)*C,t[9]=(n*A-r*R-o*_)*C,t[10]=(p*w-m*b+x*M)*C,t[11]=(l*b-u*w-f*M)*C,t[12]=(s*E-a*T-c*_)*C,t[13]=(r*T-n*E+i*_)*C,t[14]=(m*v-p*y-g*M)*C,t[15]=(u*y-l*v+d*M)*C,t):null}function x(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],s=e[5],c=e[6],h=e[7],u=e[8],l=e[9],d=e[10],f=e[11],p=e[12],m=e[13],g=e[14],x=e[15];return t[0]=s*(d*x-f*g)-l*(c*x-h*g)+m*(c*f-h*d),t[1]=-(n*(d*x-f*g)-l*(i*x-o*g)+m*(i*f-o*d)),t[2]=n*(c*x-h*g)-s*(i*x-o*g)+m*(i*h-o*c),t[3]=-(n*(c*f-h*d)-s*(i*f-o*d)+l*(i*h-o*c)),t[4]=-(a*(d*x-f*g)-u*(c*x-h*g)+p*(c*f-h*d)),t[5]=r*(d*x-f*g)-u*(i*x-o*g)+p*(i*f-o*d),t[6]=-(r*(c*x-h*g)-a*(i*x-o*g)+p*(i*h-o*c)),t[7]=r*(c*f-h*d)-a*(i*f-o*d)+u*(i*h-o*c),t[8]=a*(l*x-f*m)-u*(s*x-h*m)+p*(s*f-h*l),t[9]=-(r*(l*x-f*m)-u*(n*x-o*m)+p*(n*f-o*l)),t[10]=r*(s*x-h*m)-a*(n*x-o*m)+p*(n*h-o*s),t[11]=-(r*(s*f-h*l)-a*(n*f-o*l)+u*(n*h-o*s)),t[12]=-(a*(l*g-d*m)-u*(s*g-c*m)+p*(s*d-c*l)),t[13]=r*(l*g-d*m)-u*(n*g-i*m)+p*(n*d-i*l),t[14]=-(r*(s*g-c*m)-a*(n*g-i*m)+p*(n*c-i*s)),t[15]=r*(s*d-c*l)-a*(n*d-i*l)+u*(n*c-i*s),t}function M(t){var e=t[0],r=t[1],n=t[2],i=t[3],o=t[4],a=t[5],s=t[6],c=t[7],h=t[8],u=t[9],l=t[10],d=t[11],f=t[12],p=t[13],m=t[14],g=t[15];return(e*a-r*o)*(l*g-d*m)-(e*s-n*o)*(u*g-d*p)+(e*c-i*o)*(u*m-l*p)+(r*s-n*a)*(h*g-d*f)-(r*c-i*a)*(h*m-l*f)+(n*c-i*s)*(h*p-u*f)}function v(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],c=e[5],h=e[6],u=e[7],l=e[8],d=e[9],f=e[10],p=e[11],m=e[12],g=e[13],x=e[14],M=e[15],v=r[0],b=r[1],y=r[2],w=r[3];return t[0]=v*n+b*s+y*l+w*m,t[1]=v*i+b*c+y*d+w*g,t[2]=v*o+b*h+y*f+w*x,t[3]=v*a+b*u+y*p+w*M,v=r[4],b=r[5],y=r[6],w=r[7],t[4]=v*n+b*s+y*l+w*m,t[5]=v*i+b*c+y*d+w*g,t[6]=v*o+b*h+y*f+w*x,t[7]=v*a+b*u+y*p+w*M,v=r[8],b=r[9],y=r[10],w=r[11],t[8]=v*n+b*s+y*l+w*m,t[9]=v*i+b*c+y*d+w*g,t[10]=v*o+b*h+y*f+w*x,t[11]=v*a+b*u+y*p+w*M,v=r[12],b=r[13],y=r[14],w=r[15],t[12]=v*n+b*s+y*l+w*m,t[13]=v*i+b*c+y*d+w*g,t[14]=v*o+b*h+y*f+w*x,t[15]=v*a+b*u+y*p+w*M,t}function b(t,e,r){var n=r[0],i=r[1],o=r[2],a=void 0,s=void 0,c=void 0,h=void 0,u=void 0,l=void 0,d=void 0,f=void 0,p=void 0,m=void 0,g=void 0,x=void 0;return e===t?(t[12]=e[0]*n+e[4]*i+e[8]*o+e[12],t[13]=e[1]*n+e[5]*i+e[9]*o+e[13],t[14]=e[2]*n+e[6]*i+e[10]*o+e[14],t[15]=e[3]*n+e[7]*i+e[11]*o+e[15]):(a=e[0],s=e[1],c=e[2],h=e[3],u=e[4],l=e[5],d=e[6],f=e[7],p=e[8],m=e[9],g=e[10],x=e[11],t[0]=a,t[1]=s,t[2]=c,t[3]=h,t[4]=u,t[5]=l,t[6]=d,t[7]=f,t[8]=p,t[9]=m,t[10]=g,t[11]=x,t[12]=a*n+u*i+p*o+e[12],t[13]=s*n+l*i+m*o+e[13],t[14]=c*n+d*i+g*o+e[14],t[15]=h*n+f*i+x*o+e[15]),t}function y(t,e,r){var n=r[0],i=r[1],o=r[2];return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*o,t[9]=e[9]*o,t[10]=e[10]*o,t[11]=e[11]*o,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function w(t,e,r,n){var i,o,s,c,h,u,l,d,f,p,m,g,x,M,v,b,y,w,P,_,E,A,T,R,S=n[0],C=n[1],z=n[2],L=Math.sqrt(S*S+C*C+z*z);return L<a?null:(S*=L=1/L,C*=L,z*=L,i=Math.sin(r),s=1-(o=Math.cos(r)),c=e[0],h=e[1],u=e[2],l=e[3],d=e[4],f=e[5],p=e[6],m=e[7],g=e[8],x=e[9],M=e[10],v=e[11],b=S*S*s+o,y=C*S*s+z*i,w=z*S*s-C*i,P=S*C*s-z*i,_=C*C*s+o,E=z*C*s+S*i,A=S*z*s+C*i,T=C*z*s-S*i,R=z*z*s+o,t[0]=c*b+d*y+g*w,t[1]=h*b+f*y+x*w,t[2]=u*b+p*y+M*w,t[3]=l*b+m*y+v*w,t[4]=c*P+d*_+g*E,t[5]=h*P+f*_+x*E,t[6]=u*P+p*_+M*E,t[7]=l*P+m*_+v*E,t[8]=c*A+d*T+g*R,t[9]=h*A+f*T+x*R,t[10]=u*A+p*T+M*R,t[11]=l*A+m*T+v*R,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function P(t,e,r){var n=Math.sin(r),i=Math.cos(r),o=e[4],a=e[5],s=e[6],c=e[7],h=e[8],u=e[9],l=e[10],d=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=o*i+h*n,t[5]=a*i+u*n,t[6]=s*i+l*n,t[7]=c*i+d*n,t[8]=h*i-o*n,t[9]=u*i-a*n,t[10]=l*i-s*n,t[11]=d*i-c*n,t}function _(t,e,r){var n=Math.sin(r),i=Math.cos(r),o=e[0],a=e[1],s=e[2],c=e[3],h=e[8],u=e[9],l=e[10],d=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=o*i-h*n,t[1]=a*i-u*n,t[2]=s*i-l*n,t[3]=c*i-d*n,t[8]=o*n+h*i,t[9]=a*n+u*i,t[10]=s*n+l*i,t[11]=c*n+d*i,t}function E(t,e,r){var n=Math.sin(r),i=Math.cos(r),o=e[0],a=e[1],s=e[2],c=e[3],h=e[4],u=e[5],l=e[6],d=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=o*i+h*n,t[1]=a*i+u*n,t[2]=s*i+l*n,t[3]=c*i+d*n,t[4]=h*i-o*n,t[5]=u*i-a*n,t[6]=l*i-s*n,t[7]=d*i-c*n,t}function A(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function T(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function R(t,e,r){var n,i,o,s=r[0],c=r[1],h=r[2],u=Math.sqrt(s*s+c*c+h*h);return u<a?null:(s*=u=1/u,c*=u,h*=u,n=Math.sin(e),o=1-(i=Math.cos(e)),t[0]=s*s*o+i,t[1]=c*s*o+h*n,t[2]=h*s*o-c*n,t[3]=0,t[4]=s*c*o-h*n,t[5]=c*c*o+i,t[6]=h*c*o+s*n,t[7]=0,t[8]=s*h*o+c*n,t[9]=c*h*o-s*n,t[10]=h*h*o+i,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function S(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function C(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function z(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function L(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=n+n,c=i+i,h=o+o,u=n*s,l=n*c,d=n*h,f=i*c,p=i*h,m=o*h,g=a*s,x=a*c,M=a*h;return t[0]=1-(f+m),t[1]=l+M,t[2]=d-x,t[3]=0,t[4]=l-M,t[5]=1-(u+m),t[6]=p+g,t[7]=0,t[8]=d+x,t[9]=p-g,t[10]=1-(u+f),t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function k(t,e){var r=new s(3),n=-e[0],i=-e[1],o=-e[2],a=e[3],c=e[4],h=e[5],u=e[6],l=e[7],d=n*n+i*i+o*o+a*a;return d>0?(r[0]=2*(c*a+l*n+h*o-u*i)/d,r[1]=2*(h*a+l*i+u*n-c*o)/d,r[2]=2*(u*a+l*o+c*i-h*n)/d):(r[0]=2*(c*a+l*n+h*o-u*i),r[1]=2*(h*a+l*i+u*n-c*o),r[2]=2*(u*a+l*o+c*i-h*n)),L(t,e,r),t}function B(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function D(t,e){var r=e[0],n=e[1],i=e[2],o=e[4],a=e[5],s=e[6],c=e[8],h=e[9],u=e[10];return t[0]=Math.sqrt(r*r+n*n+i*i),t[1]=Math.sqrt(o*o+a*a+s*s),t[2]=Math.sqrt(c*c+h*h+u*u),t}function I(t,e){var r=e[0]+e[5]+e[10],n=0;return r>0?(n=2*Math.sqrt(r+1),t[3]=.25*n,t[0]=(e[6]-e[9])/n,t[1]=(e[8]-e[2])/n,t[2]=(e[1]-e[4])/n):e[0]>e[5]&&e[0]>e[10]?(n=2*Math.sqrt(1+e[0]-e[5]-e[10]),t[3]=(e[6]-e[9])/n,t[0]=.25*n,t[1]=(e[1]+e[4])/n,t[2]=(e[8]+e[2])/n):e[5]>e[10]?(n=2*Math.sqrt(1+e[5]-e[0]-e[10]),t[3]=(e[8]-e[2])/n,t[0]=(e[1]+e[4])/n,t[1]=.25*n,t[2]=(e[6]+e[9])/n):(n=2*Math.sqrt(1+e[10]-e[0]-e[5]),t[3]=(e[1]-e[4])/n,t[0]=(e[8]+e[2])/n,t[1]=(e[6]+e[9])/n,t[2]=.25*n),t}function F(t,e,r,n){var i=e[0],o=e[1],a=e[2],s=e[3],c=i+i,h=o+o,u=a+a,l=i*c,d=i*h,f=i*u,p=o*h,m=o*u,g=a*u,x=s*c,M=s*h,v=s*u,b=n[0],y=n[1],w=n[2];return t[0]=(1-(p+g))*b,t[1]=(d+v)*b,t[2]=(f-M)*b,t[3]=0,t[4]=(d-v)*y,t[5]=(1-(l+g))*y,t[6]=(m+x)*y,t[7]=0,t[8]=(f+M)*w,t[9]=(m-x)*w,t[10]=(1-(l+p))*w,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function U(t,e,r,n,i){var o=e[0],a=e[1],s=e[2],c=e[3],h=o+o,u=a+a,l=s+s,d=o*h,f=o*u,p=o*l,m=a*u,g=a*l,x=s*l,M=c*h,v=c*u,b=c*l,y=n[0],w=n[1],P=n[2],_=i[0],E=i[1],A=i[2],T=(1-(m+x))*y,R=(f+b)*y,S=(p-v)*y,C=(f-b)*w,z=(1-(d+x))*w,L=(g+M)*w,k=(p+v)*P,B=(g-M)*P,D=(1-(d+m))*P;return t[0]=T,t[1]=R,t[2]=S,t[3]=0,t[4]=C,t[5]=z,t[6]=L,t[7]=0,t[8]=k,t[9]=B,t[10]=D,t[11]=0,t[12]=r[0]+_-(T*_+C*E+k*A),t[13]=r[1]+E-(R*_+z*E+B*A),t[14]=r[2]+A-(S*_+L*E+D*A),t[15]=1,t}function O(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=r+r,s=n+n,c=i+i,h=r*a,u=n*a,l=n*s,d=i*a,f=i*s,p=i*c,m=o*a,g=o*s,x=o*c;return t[0]=1-l-p,t[1]=u+x,t[2]=d-g,t[3]=0,t[4]=u-x,t[5]=1-h-p,t[6]=f+m,t[7]=0,t[8]=d+g,t[9]=f-m,t[10]=1-h-l,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function V(t,e,r,n,i,o,a){var s=1/(r-e),c=1/(i-n),h=1/(o-a);return t[0]=2*o*s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*o*c,t[6]=0,t[7]=0,t[8]=(r+e)*s,t[9]=(i+n)*c,t[10]=(a+o)*h,t[11]=-1,t[12]=0,t[13]=0,t[14]=a*o*2*h,t[15]=0,t}function j(t,e,r,n,i){var o=1/Math.tan(e/2),a=void 0;return t[0]=o/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=i&&i!==1/0?(a=1/(n-i),t[10]=(i+n)*a,t[14]=2*i*n*a):(t[10]=-1,t[14]=-2*n),t}function q(t,e,r,n){var i=Math.tan(e.upDegrees*Math.PI/180),o=Math.tan(e.downDegrees*Math.PI/180),a=Math.tan(e.leftDegrees*Math.PI/180),s=Math.tan(e.rightDegrees*Math.PI/180),c=2/(a+s),h=2/(i+o);return t[0]=c,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=h,t[6]=0,t[7]=0,t[8]=-(a-s)*c*.5,t[9]=(i-o)*h*.5,t[10]=n/(r-n),t[11]=-1,t[12]=0,t[13]=0,t[14]=n*r/(r-n),t[15]=0,t}function N(t,e,r,n,i,o,a){var s=1/(e-r),c=1/(n-i),h=1/(o-a);return t[0]=-2*s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*c,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*h,t[11]=0,t[12]=(e+r)*s,t[13]=(i+n)*c,t[14]=(a+o)*h,t[15]=1,t}function H(t,e,r,n){var i=void 0,o=void 0,s=void 0,c=void 0,h=void 0,u=void 0,l=void 0,d=void 0,f=void 0,m=void 0,g=e[0],x=e[1],M=e[2],v=n[0],b=n[1],y=n[2],w=r[0],P=r[1],_=r[2];return Math.abs(g-w)<a&&Math.abs(x-P)<a&&Math.abs(M-_)<a?p(t):(l=g-w,d=x-P,f=M-_,i=b*(f*=m=1/Math.sqrt(l*l+d*d+f*f))-y*(d*=m),o=y*(l*=m)-v*f,s=v*d-b*l,(m=Math.sqrt(i*i+o*o+s*s))?(i*=m=1/m,o*=m,s*=m):(i=0,o=0,s=0),c=d*s-f*o,h=f*i-l*s,u=l*o-d*i,(m=Math.sqrt(c*c+h*h+u*u))?(c*=m=1/m,h*=m,u*=m):(c=0,h=0,u=0),t[0]=i,t[1]=c,t[2]=l,t[3]=0,t[4]=o,t[5]=h,t[6]=d,t[7]=0,t[8]=s,t[9]=u,t[10]=f,t[11]=0,t[12]=-(i*g+o*x+s*M),t[13]=-(c*g+h*x+u*M),t[14]=-(l*g+d*x+f*M),t[15]=1,t)}function Y(t,e,r,n){var i=e[0],o=e[1],a=e[2],s=n[0],c=n[1],h=n[2],u=i-r[0],l=o-r[1],d=a-r[2],f=u*u+l*l+d*d;f>0&&(u*=f=1/Math.sqrt(f),l*=f,d*=f);var p=c*d-h*l,m=h*u-s*d,g=s*l-c*u;return(f=p*p+m*m+g*g)>0&&(p*=f=1/Math.sqrt(f),m*=f,g*=f),t[0]=p,t[1]=m,t[2]=g,t[3]=0,t[4]=l*g-d*m,t[5]=d*p-u*g,t[6]=u*m-l*p,t[7]=0,t[8]=u,t[9]=l,t[10]=d,t[11]=0,t[12]=i,t[13]=o,t[14]=a,t[15]=1,t}function X(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function G(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2)+Math.pow(t[9],2)+Math.pow(t[10],2)+Math.pow(t[11],2)+Math.pow(t[12],2)+Math.pow(t[13],2)+Math.pow(t[14],2)+Math.pow(t[15],2))}function W(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t[8]=e[8]+r[8],t[9]=e[9]+r[9],t[10]=e[10]+r[10],t[11]=e[11]+r[11],t[12]=e[12]+r[12],t[13]=e[13]+r[13],t[14]=e[14]+r[14],t[15]=e[15]+r[15],t}function K(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t[6]=e[6]-r[6],t[7]=e[7]-r[7],t[8]=e[8]-r[8],t[9]=e[9]-r[9],t[10]=e[10]-r[10],t[11]=e[11]-r[11],t[12]=e[12]-r[12],t[13]=e[13]-r[13],t[14]=e[14]-r[14],t[15]=e[15]-r[15],t}function Q(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*r,t[9]=e[9]*r,t[10]=e[10]*r,t[11]=e[11]*r,t[12]=e[12]*r,t[13]=e[13]*r,t[14]=e[14]*r,t[15]=e[15]*r,t}function Z(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t[4]=e[4]+r[4]*n,t[5]=e[5]+r[5]*n,t[6]=e[6]+r[6]*n,t[7]=e[7]+r[7]*n,t[8]=e[8]+r[8]*n,t[9]=e[9]+r[9]*n,t[10]=e[10]+r[10]*n,t[11]=e[11]+r[11]*n,t[12]=e[12]+r[12]*n,t[13]=e[13]+r[13]*n,t[14]=e[14]+r[14]*n,t[15]=e[15]+r[15]*n,t}function $(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]}function J(t,e){var r=t[0],n=t[1],i=t[2],o=t[3],s=t[4],c=t[5],h=t[6],u=t[7],l=t[8],d=t[9],f=t[10],p=t[11],m=t[12],g=t[13],x=t[14],M=t[15],v=e[0],b=e[1],y=e[2],w=e[3],P=e[4],_=e[5],E=e[6],A=e[7],T=e[8],R=e[9],S=e[10],C=e[11],z=e[12],L=e[13],k=e[14],B=e[15];return Math.abs(r-v)<=a*Math.max(1,Math.abs(r),Math.abs(v))&&Math.abs(n-b)<=a*Math.max(1,Math.abs(n),Math.abs(b))&&Math.abs(i-y)<=a*Math.max(1,Math.abs(i),Math.abs(y))&&Math.abs(o-w)<=a*Math.max(1,Math.abs(o),Math.abs(w))&&Math.abs(s-P)<=a*Math.max(1,Math.abs(s),Math.abs(P))&&Math.abs(c-_)<=a*Math.max(1,Math.abs(c),Math.abs(_))&&Math.abs(h-E)<=a*Math.max(1,Math.abs(h),Math.abs(E))&&Math.abs(u-A)<=a*Math.max(1,Math.abs(u),Math.abs(A))&&Math.abs(l-T)<=a*Math.max(1,Math.abs(l),Math.abs(T))&&Math.abs(d-R)<=a*Math.max(1,Math.abs(d),Math.abs(R))&&Math.abs(f-S)<=a*Math.max(1,Math.abs(f),Math.abs(S))&&Math.abs(p-C)<=a*Math.max(1,Math.abs(p),Math.abs(C))&&Math.abs(m-z)<=a*Math.max(1,Math.abs(m),Math.abs(z))&&Math.abs(g-L)<=a*Math.max(1,Math.abs(g),Math.abs(L))&&Math.abs(x-k)<=a*Math.max(1,Math.abs(x),Math.abs(k))&&Math.abs(M-B)<=a*Math.max(1,Math.abs(M),Math.abs(B))}var tt=v,et=K;function rt(){var t=new s(3);return s!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function nt(t){var e=new s(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function it(t){var e=t[0],r=t[1],n=t[2];return Math.sqrt(e*e+r*r+n*n)}function ot(t,e,r){var n=new s(3);return n[0]=t,n[1]=e,n[2]=r,n}function at(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function st(t,e,r,n){return t[0]=e,t[1]=r,t[2]=n,t}function ct(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t}function ht(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t}function ut(t,e,r){return t[0]=e[0]*r[0],t[1]=e[1]*r[1],t[2]=e[2]*r[2],t}function lt(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t[2]=e[2]/r[2],t}function dt(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t}function ft(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t}function pt(t,e,r){return t[0]=Math.min(e[0],r[0]),t[1]=Math.min(e[1],r[1]),t[2]=Math.min(e[2],r[2]),t}function mt(t,e,r){return t[0]=Math.max(e[0],r[0]),t[1]=Math.max(e[1],r[1]),t[2]=Math.max(e[2],r[2]),t}function gt(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t}function xt(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t}function Mt(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t}function vt(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return Math.sqrt(r*r+n*n+i*i)}function bt(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return r*r+n*n+i*i}function yt(t){var e=t[0],r=t[1],n=t[2];return e*e+r*r+n*n}function wt(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function Pt(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function _t(t,e){var r=e[0],n=e[1],i=e[2],o=r*r+n*n+i*i;return o>0&&(o=1/Math.sqrt(o),t[0]=e[0]*o,t[1]=e[1]*o,t[2]=e[2]*o),t}function Et(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function At(t,e,r){var n=e[0],i=e[1],o=e[2],a=r[0],s=r[1],c=r[2];return t[0]=i*c-o*s,t[1]=o*a-n*c,t[2]=n*s-i*a,t}function Tt(t,e,r,n){var i=e[0],o=e[1],a=e[2];return t[0]=i+n*(r[0]-i),t[1]=o+n*(r[1]-o),t[2]=a+n*(r[2]-a),t}function Rt(t,e,r,n,i,o){var a=o*o,s=a*(2*o-3)+1,c=a*(o-2)+o,h=a*(o-1),u=a*(3-2*o);return t[0]=e[0]*s+r[0]*c+n[0]*h+i[0]*u,t[1]=e[1]*s+r[1]*c+n[1]*h+i[1]*u,t[2]=e[2]*s+r[2]*c+n[2]*h+i[2]*u,t}function St(t,e,r,n,i,o){var a=1-o,s=a*a,c=o*o,h=s*a,u=3*o*s,l=3*c*a,d=c*o;return t[0]=e[0]*h+r[0]*u+n[0]*l+i[0]*d,t[1]=e[1]*h+r[1]*u+n[1]*l+i[1]*d,t[2]=e[2]*h+r[2]*u+n[2]*l+i[2]*d,t}function Ct(t,e){e=e||1;var r=2*c()*Math.PI,n=2*c()-1,i=Math.sqrt(1-n*n)*e;return t[0]=Math.cos(r)*i,t[1]=Math.sin(r)*i,t[2]=n*e,t}function zt(t,e,r){var n=e[0],i=e[1],o=e[2],a=r[3]*n+r[7]*i+r[11]*o+r[15];return a=a||1,t[0]=(r[0]*n+r[4]*i+r[8]*o+r[12])/a,t[1]=(r[1]*n+r[5]*i+r[9]*o+r[13])/a,t[2]=(r[2]*n+r[6]*i+r[10]*o+r[14])/a,t}function Lt(t,e,r){var n=e[0],i=e[1],o=e[2];return t[0]=n*r[0]+i*r[3]+o*r[6],t[1]=n*r[1]+i*r[4]+o*r[7],t[2]=n*r[2]+i*r[5]+o*r[8],t}function kt(t,e,r){var n=r[0],i=r[1],o=r[2],a=r[3],s=e[0],c=e[1],h=e[2],u=i*h-o*c,l=o*s-n*h,d=n*c-i*s,f=i*d-o*l,p=o*u-n*d,m=n*l-i*u,g=2*a;return u*=g,l*=g,d*=g,f*=2,p*=2,m*=2,t[0]=s+u+f,t[1]=c+l+p,t[2]=h+d+m,t}function Bt(t,e,r,n){var i=[],o=[];return i[0]=e[0]-r[0],i[1]=e[1]-r[1],i[2]=e[2]-r[2],o[0]=i[0],o[1]=i[1]*Math.cos(n)-i[2]*Math.sin(n),o[2]=i[1]*Math.sin(n)+i[2]*Math.cos(n),t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2],t}function Dt(t,e,r,n){var i=[],o=[];return i[0]=e[0]-r[0],i[1]=e[1]-r[1],i[2]=e[2]-r[2],o[0]=i[2]*Math.sin(n)+i[0]*Math.cos(n),o[1]=i[1],o[2]=i[2]*Math.cos(n)-i[0]*Math.sin(n),t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2],t}function It(t,e,r,n){var i=[],o=[];return i[0]=e[0]-r[0],i[1]=e[1]-r[1],i[2]=e[2]-r[2],o[0]=i[0]*Math.cos(n)-i[1]*Math.sin(n),o[1]=i[0]*Math.sin(n)+i[1]*Math.cos(n),o[2]=i[2],t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2],t}function Ft(t,e){var r=ot(t[0],t[1],t[2]),n=ot(e[0],e[1],e[2]);_t(r,r),_t(n,n);var i=Et(r,n);return i>1?0:i<-1?Math.PI:Math.acos(i)}function Ut(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function Ot(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}function Vt(t,e){var r=t[0],n=t[1],i=t[2],o=e[0],s=e[1],c=e[2];return Math.abs(r-o)<=a*Math.max(1,Math.abs(r),Math.abs(o))&&Math.abs(n-s)<=a*Math.max(1,Math.abs(n),Math.abs(s))&&Math.abs(i-c)<=a*Math.max(1,Math.abs(i),Math.abs(c))}var jt=ht,qt=ut,Nt=lt,Ht=vt,Yt=bt,Xt=it,Gt=yt,Wt=function(){var t=rt();return function(e,r,n,i,o,a){var s=void 0,c=void 0;for(r||(r=3),n||(n=0),c=i?Math.min(i*r+n,e.length):e.length,s=n;s<c;s+=r)t[0]=e[s],t[1]=e[s+1],t[2]=e[s+2],o(t,t,a),e[s]=t[0],e[s+1]=t[1],e[s+2]=t[2];return e}}();class Kt{constructor(t,e,r,o=45*Math.PI/180,a=.1,s=200,c){this.gl=t,this.program=e,this.virtualProgram=r,this.fieldOfView=o,this.zNear=a,this.zFar=s,this.aspect=c,this.position=i.create(),this.rotation=i.create(),this.movementSpeed=500,this.rotationSpeed=.01,this.projectionMatrix=n.create(),this.configure(),this.position[0]=100,this.position[1]=-8,this.position[2]=40}draw(){const t=this.program;this.gl.useProgram(t.program);const e=n.create();n.invert(e,this.modelViewMatrix),n.transpose(e,e),this.gl.uniformMatrix4fv(t.uniformLocations.projectionMatrix,!1,this.projectionMatrix),this.gl.uniformMatrix4fv(t.uniformLocations.modelViewMatrix,!1,this.modelViewMatrix),this.gl.uniformMatrix4fv(t.uniformLocations.normalMatrix,!1,e)}drawVirtual(){const t=this.virtualProgram;this.gl.useProgram(t.program),this.gl.uniformMatrix4fv(t.uniformLocations.projectionMatrix,!1,this.projectionMatrix),this.gl.uniformMatrix4fv(t.uniformLocations.modelViewMatrix,!1,this.modelViewMatrix)}configure(){this.aspect=this.gl.canvas.clientWidth/this.gl.canvas.clientHeight,n.perspective(this.projectionMatrix,this.fieldOfView,this.aspect,this.zNear,this.zFar)}control(t,e,r,n){const i=this.movementSpeed/1e3,o={x:0,y:0,z:0};e.front?o.z-=i:e.back&&(o.z+=i),e.left?o.x+=i:e.right&&(o.x-=i),e.up?o.y-=i:e.down&&(o.y+=i),this.moveByDirection(o),this.rotateByPointer(r,n)}get modelViewMatrix(){const t=n.create();return n.rotateX(t,t,this.rotation[0]),n.rotateY(t,t,this.rotation[1]),n.rotateZ(t,t,this.rotation[2]-Math.PI),n.translate(t,t,[-this.position[0],-this.position[1],-this.position[2]]),t}moveByDirection(t){if(0===t.x&&0===t.y&&0===t.z)return;const e=i.create();e[0]=t.x,e[1]=t.y,e[2]=t.z;var r=n.create();n.rotateY(r,r,this.rotation[1]),i.transformMat4(e,e,r),i.add(this.position,this.position,e)}rotateByPointer(t,e){var r=[e.x-t.x,e.y-t.y];this.rotation[1]+=r[0]*this.rotationSpeed,this.rotation[1]<0&&(this.rotation[1]+=2*Math.PI),this.rotation[1]>=2*Math.PI&&(this.rotation[1]-=2*Math.PI),this.rotation[0]+=r[1]*this.rotationSpeed,this.rotation[0]<.5*-Math.PI&&(this.rotation[0]=.5*-Math.PI),this.rotation[0]>.5*Math.PI&&(this.rotation[0]=.5*Math.PI)}}class Qt{constructor(){this.changeCallback=(()=>null),this.resizeCallback=(()=>null),this.clickCallback=(()=>null),this.oldMousePoint={x:0,y:0},this.mousePoint={x:0,y:0},this.keysPress={left:!1,right:!1,front:!1,back:!1,up:!1,down:!1},this.bindEvents()}bindEvents(){document.addEventListener("keydown",this.onKeyDown.bind(this)),document.addEventListener("keyup",this.onKeyUp.bind(this)),document.addEventListener("mousemove",this.onMouseMove.bind(this)),document.addEventListener("click",t=>this.clickCallback(t.clientX,t.clientY)),window.addEventListener("resize",()=>this.resizeCallback())}onClick(t){this.clickCallback=t}onChange(t){this.changeCallback=t}onResize(t){this.resizeCallback=t}onMouseMove(t){const e=t.movementX||t.mozMovementX||t.webkitMovementX||0,r=t.movementY||t.mozMovementY||t.webkitMovementY||0;this.mousePoint.x+=e,this.mousePoint.y+=r,this.changeCallback(this.keysPress,this.oldMousePoint,this.mousePoint),this.oldMousePoint.x=this.mousePoint.x=window.innerWidth>>1,this.oldMousePoint.y=this.mousePoint.y=window.innerHeight>>1}onKeyDown(t){if(87==t.keyCode||38==t.keyCode)this.keysPress.front=!0;else if(83==t.keyCode||40==t.keyCode)this.keysPress.back=!0;else if(65==t.keyCode||37==t.keyCode)this.keysPress.left=!0;else if(68==t.keyCode||39==t.keyCode)this.keysPress.right=!0;else if(32==t.keyCode)this.keysPress.up=!0;else{if(16!=t.keyCode)return;this.keysPress.down=!0}this.changeCallback(this.keysPress,this.mousePoint,this.mousePoint)}onKeyUp(t){if(87==t.keyCode||38==t.keyCode)this.keysPress.front=!1;else if(83==t.keyCode||40==t.keyCode)this.keysPress.back=!1;else if(65==t.keyCode||37==t.keyCode)this.keysPress.left=!1;else if(68==t.keyCode||39==t.keyCode)this.keysPress.right=!1;else if(32==t.keyCode)this.keysPress.up=!1;else{if(16!=t.keyCode)return;this.keysPress.down=!1}this.changeCallback(this.keysPress,this.mousePoint,this.mousePoint)}}const Zt="\n  varying highp vec2 vTextureCoord;\n  varying highp vec3 vLighting;\n  uniform sampler2D uSampler;\n  \n  void main(void) {\n    highp vec4 texelColor = texture2D(uSampler, vTextureCoord);\n    gl_FragColor = vec4(texelColor.rgb * vLighting, texelColor.a);\n  }\n",$t="\n  attribute vec4 aVertexPosition;\n  attribute vec3 aVertexNormal;\n  attribute vec2 aTextureCoord;\n\n  uniform mat4 uNormalMatrix;\n  uniform mat4 uModelViewMatrix;\n  uniform mat4 uProjectionMatrix;\n\n  varying highp vec2 vTextureCoord;\n  varying highp vec3 vLighting;\n\n  void main(void) {\n    gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n    vTextureCoord = aTextureCoord;\n\n    // Apply lighting effect\n    highp vec3 ambientLight = vec3(0.3, 0.3, 0.3);\n    highp vec3 directionalLightColor = vec3(1, 1, 1);\n    highp vec3 directionalVector = normalize(vec3(0.85, 0.8, 0.75));\n\n    highp vec4 transformedNormal = uNormalMatrix * vec4(aVertexNormal, 1.0);\n    \n    highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);\n    vLighting = ambientLight + (directionalLightColor * directional);\n  }\n";class Jt{}class te extends Jt{constructor(t){super(),this.gl=t,this.buildProgram()}buildProgram(){const t=this.loadShader(this.gl.VERTEX_SHADER,$t),e=this.loadShader(this.gl.FRAGMENT_SHADER,Zt),r=this.gl.createProgram();if(this.gl.attachShader(r,t),this.gl.attachShader(r,e),this.gl.linkProgram(r),!this.gl.getProgramParameter(r,this.gl.LINK_STATUS))throw new Error(`Unable to initialize the shader program: ${this.gl.getProgramInfoLog(r)}`);this.program=r,this.attributeLocations={vertexPosition:this.gl.getAttribLocation(r,"aVertexPosition"),vertexNormal:this.gl.getAttribLocation(r,"aVertexNormal"),textureCoord:this.gl.getAttribLocation(r,"aTextureCoord")},this.uniformLocations={projectionMatrix:this.gl.getUniformLocation(r,"uProjectionMatrix"),modelViewMatrix:this.gl.getUniformLocation(r,"uModelViewMatrix"),normalMatrix:this.gl.getUniformLocation(r,"uNormalMatrix"),uSampler:this.gl.getUniformLocation(r,"uSampler")}}loadShader(t,e){const r=this.gl.createShader(t);if(this.gl.shaderSource(r,e),this.gl.compileShader(r),!this.gl.getShaderParameter(r,this.gl.COMPILE_STATUS))throw this.gl.deleteShader(r),new Error(`An error occurred compiling the shaders: ${this.gl.getShaderInfoLog(r)}`);return r}}class ee{constructor(t){this.red_bits=t.getParameter(t.RED_BITS),this.green_bits=t.getParameter(t.GREEN_BITS),this.blue_bits=t.getParameter(t.BLUE_BITS),this.alpha_bits=t.getParameter(t.ALPHA_BITS),this.total_bits=this.red_bits+this.green_bits+this.blue_bits+this.alpha_bits,this.red_scale=Math.pow(2,this.red_bits),this.green_scale=Math.pow(2,this.green_bits),this.blue_scale=Math.pow(2,this.blue_bits),this.alpha_scale=Math.pow(2,this.alpha_bits),this.red_shift=Math.pow(2,this.green_bits+this.blue_bits+this.alpha_bits),this.green_shift=Math.pow(2,this.blue_bits+this.alpha_bits),this.blue_shift=Math.pow(2,this.alpha_bits)}toColor(t){let e,r,n,i,o=new Float32Array(4);return t-=(e=Math.floor(t/this.red_shift))*this.red_shift,t-=(r=Math.floor(t/this.green_shift))*this.green_shift,i=t-=(n=Math.floor(t/this.blue_shift))*this.blue_shift,o[0]=e/(this.red_scale-1),o[1]=r/(this.green_scale-1),o[2]=n/(this.blue_scale-1),o[3]=i/(this.alpha_scale-1),o}fromColor(t,e,r,n){return t*this.red_shift+e*this.green_shift+r*this.blue_shift+n}}const re=new class{constructor(){this.current=0}next(){return this.current++,this.current}};class ne{constructor(t,e,r){this.position={x:0,y:0,z:0},this.buffers={position:null,texture:null,normal:null,indices:null,color:null},this.context=t,this.program=e,this.virtualProgram=r,this.id=re.next(),this.uniqueId=new ee(this.context)}translate(t,e,r){this.position.x=t,this.position.y=e,this.position.z=r,this.updatePositionBuffer()}updateColorBuffer(){const t=this.uniqueId.toColor(this.id),e=[[t[0],t[1],t[2],t[3]],[t[0],t[1],t[2],t[3]],[t[0],t[1],t[2],t[3]],[t[0],t[1],t[2],t[3]],[t[0],t[1],t[2],t[3]],[t[0],t[1],t[2],t[3]]];let r=[];for(var n=0;n<e.length;++n){const t=e[n];r=r.concat(t,t,t,t)}const i=this.context.createBuffer();this.context.bindBuffer(this.context.ARRAY_BUFFER,i),this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(r),this.context.STATIC_DRAW),this.buffers.color=i}drawVirtual(t){const e=this.virtualProgram,r=this.context.FLOAT;this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffers.position),this.context.vertexAttribPointer(e.attributeLocations.vertexPosition,3,r,!1,0,0),this.context.enableVertexAttribArray(e.attributeLocations.vertexPosition);const n=this.context.FLOAT;this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffers.color),this.context.vertexAttribPointer(e.attributeLocations.vertexColor,4,n,!1,0,0),this.context.enableVertexAttribArray(e.attributeLocations.vertexColor),this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffers.indices);const i=this.context.UNSIGNED_SHORT;this.context.useProgram(e.program),this.context.drawElements(this.context.TRIANGLES,36,i,0)}}class ie{static load(t){const e=t.createTexture();t.bindTexture(t.TEXTURE_2D,e);const r=t.RGBA,n=t.RGBA,i=t.UNSIGNED_BYTE,o=new Uint8Array([0,0,255,255]);t.texImage2D(t.TEXTURE_2D,0,r,1,1,0,n,i,o);const a=new Image;return a.onload=function(){t.bindTexture(t.TEXTURE_2D,e),t.texImage2D(t.TEXTURE_2D,0,r,n,i,a);const o=t=>0==(t&t-1);o(a.width)&&o(a.height)?t.generateMipmap(t.TEXTURE_2D):(t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR))},a.src="/assets/textures/atlas.png",e}static get earthCube(){return[0,0,.25,0,.25,1,0,1]}static get earthAndGrassCube(){return[.25,0,.5,0,.5,1,.25,1]}static get earthAndGrassCubeTwo(){return[.5,0,.5,1,.25,1,.25,0]}static get grassCube(){return[.5,0,.75,0,.75,1,.5,1]}static get darkCube(){return[.75,0,1,0,1,1,.75,1]}}class oe extends ne{constructor(t,e,r,n){super(t,e,r),this.grassArround=!1,this.size=n,this.texture=ie.load(t),this.initBuffers()}setGrassArround(t){t!==this.grassArround&&(this.grassArround=t,this.updateTextureBuffer())}draw(t){const e=this.program,r=this.context.FLOAT;this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffers.position),this.context.vertexAttribPointer(e.attributeLocations.vertexPosition,3,r,!1,0,0),this.context.enableVertexAttribArray(e.attributeLocations.vertexPosition);const n=this.context.FLOAT;this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffers.texture),this.context.vertexAttribPointer(e.attributeLocations.textureCoord,2,n,!1,0,0),this.context.enableVertexAttribArray(e.attributeLocations.textureCoord);const i=this.context.FLOAT;this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffers.normal),this.context.vertexAttribPointer(e.attributeLocations.vertexNormal,3,i,!1,0,0),this.context.enableVertexAttribArray(e.attributeLocations.vertexNormal),this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffers.indices),this.context.useProgram(e.program),this.context.activeTexture(this.context.TEXTURE0),this.context.bindTexture(this.context.TEXTURE_2D,this.texture),this.context.uniform1i(e.uniformLocations.uSampler,0);const o=this.context.UNSIGNED_SHORT;this.context.drawElements(this.context.TRIANGLES,36,o,0)}initBuffers(){this.updatePositionBuffer(),this.updateNormalBuffer(),this.updateTextureBuffer(),this.updateIndicesBuffer(),this.updateColorBuffer()}updatePositionBuffer(){const t=this.context.createBuffer(),e={x:this.position.x+this.size,y:this.position.y+this.size,z:this.position.z+this.size},r={x:this.position.x,y:this.position.y,z:this.position.z},n=[r.x,r.y,e.z,e.x,r.y,e.z,e.x,e.y,e.z,r.x,e.y,e.z,r.x,r.y,r.z,r.x,e.y,r.z,e.x,e.y,r.z,e.x,r.y,r.z,r.x,e.y,r.z,r.x,e.y,e.z,e.x,e.y,e.z,e.x,e.y,r.z,r.x,r.y,r.z,e.x,r.y,r.z,e.x,r.y,e.z,r.x,r.y,e.z,e.x,r.y,r.z,e.x,e.y,r.z,e.x,e.y,e.z,e.x,r.y,e.z,r.x,r.y,r.z,r.x,r.y,e.z,r.x,e.y,e.z,r.x,e.y,r.z];this.context.bindBuffer(this.context.ARRAY_BUFFER,t),this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(n),this.context.STATIC_DRAW),this.buffers.position=t}updateNormalBuffer(){const t=this.context.createBuffer();this.context.bindBuffer(this.context.ARRAY_BUFFER,t);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0]),this.context.STATIC_DRAW),this.buffers.normal=t}updateTextureBuffer(){const t=this.context.createBuffer();this.context.bindBuffer(this.context.ARRAY_BUFFER,t);const e=this.grassArround?ie.earthAndGrassCube:ie.earthCube,r=this.grassArround?ie.earthAndGrassCubeTwo:ie.earthCube,n=[...e,...r,...ie.earthCube,...ie.grassCube,...r,...e];this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(n),this.context.STATIC_DRAW),this.buffers.texture=t}updateIndicesBuffer(){const t=this.context.createBuffer();this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,t),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,0,2,3,4,6,7,4,5,6,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]),this.context.STATIC_DRAW),this.buffers.indices=t}}var ae=function(t,e,r,n){return new(r||(r=Promise))(function(i,o){function a(t){try{c(n.next(t))}catch(t){o(t)}}function s(t){try{c(n.throw(t))}catch(t){o(t)}}function c(t){t.done?i(t.value):new r(function(e){e(t.value)}).then(a,s)}c((n=n.apply(t,e||[])).next())})};class se extends ne{constructor(t,e,r,n=40,i=5){super(t,e,r),this.context=t,this.program=e,this.virtualProgram=r,this.worldSize=n,this.slotSize=i,this.initialPoint={x:0,y:0,z:0},this.initializeMatrix()}draw(t){for(const e of this.matrix)for(const r of e)for(let e=r.length-1;e>=0;e--){const n=r[e];n instanceof oe&&n.setGrassArround(e===r.length-1),n.draw(t)}}drawVirtual(t){for(const e of this.matrix)for(const r of e)for(let e=r.length-1;e>=0;e--){const n=r[e];n instanceof oe&&n.setGrassArround(e===r.length-1),n.drawVirtual(t)}}addObjectUpTo(t){return ae(this,void 0,void 0,function*(){for(let e=0;e<this.matrix.length;e++){const r=this.matrix[e];for(let n=0;n<r.length;n++){const r=this.matrix[e][n];for(const i of r)if(i.id===t){const t=new oe(this.context,this.program,this.virtualProgram,this.slotSize);return t.translate(this.initialPoint.x+e*this.slotSize,this.initialPoint.y-r.length*this.slotSize,this.initialPoint.z+n*this.slotSize),void r.push(t)}}}})}initBuffers(){}updatePositionBuffer(){}updateColorBuffer(){}updateIndicesBuffer(){}initializeMatrix(){this.matrix=new Array(this.worldSize);for(let t=0;t<this.worldSize;t++){this.matrix[t]=new Array(this.worldSize);for(let e=0;e<this.worldSize;e++){const r=new oe(this.context,this.program,this.virtualProgram,this.slotSize);r.translate(this.initialPoint.x+t*this.slotSize,this.initialPoint.y,this.initialPoint.z+e*this.slotSize),this.matrix[t][e]=[r]}}this.randomizeSurface()}randomizeSurface(){const t=(t=0)=>Math.floor(Math.random()*(this.worldSize-2*t))+t,e=(t=0)=>Math.floor(Math.random()*(this.worldSize-2*t))+t;for(let r=0;r<5;r++){const r=Math.floor(4*Math.random())+1,n=Math.floor(15*Math.random())+5;this.createMountain(t(r),e(r),r),this.createSurfaces(t(),e(),n)}}createSurfaces(t,e,r){let n=t,i=e;for(;r>0;){const t=Math.floor(3*Math.random())-1;if(i+=Math.floor(3*Math.random())-1,(n+=t)>=this.worldSize||n<0||i>=this.worldSize||i<0)continue;const e=this.matrix[n][i],o=new oe(this.context,this.program,this.virtualProgram,this.slotSize);o.translate(this.initialPoint.x+n*this.slotSize,this.initialPoint.y-e.length*this.slotSize,this.initialPoint.z+i*this.slotSize),e.push(o),r--}}createMountain(t,e,r){if(!(t-r<0||e-r<0))for(;r>0;){for(let n=-r;n<r;n++)for(let i=-r;i<r;i++){const r=t+n,o=e+i,a=this.matrix[r][o],s=new oe(this.context,this.program,this.virtualProgram,this.slotSize);s.translate(this.initialPoint.x+r*this.slotSize,this.initialPoint.y-a.length*this.slotSize,this.initialPoint.z+o*this.slotSize),a.push(s)}r--}}}const ce="\n    varying lowp vec4 vColor;\n    \n    void main(void) {\n      gl_FragColor = vColor;\n    }\n",he="\n    attribute vec4 aVertexPosition;\n    attribute vec4 aVertexColor;\n\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    varying lowp vec4 vColor;\n    \n    void main(void) {\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n      vColor = aVertexColor;\n    }\n";class ue extends Jt{constructor(t){super(),this.gl=t,this.buildProgram()}buildProgram(){const t=this.loadShader(this.gl.VERTEX_SHADER,he),e=this.loadShader(this.gl.FRAGMENT_SHADER,ce),r=this.gl.createProgram();if(this.gl.attachShader(r,t),this.gl.attachShader(r,e),this.gl.linkProgram(r),!this.gl.getProgramParameter(r,this.gl.LINK_STATUS))throw new Error(`Unable to initialize the shader program: ${this.gl.getProgramInfoLog(r)}`);this.program=r,this.attributeLocations={vertexPosition:this.gl.getAttribLocation(r,"aVertexPosition"),vertexColor:this.gl.getAttribLocation(r,"aVertexColor")},this.uniformLocations={projectionMatrix:this.gl.getUniformLocation(r,"uProjectionMatrix"),modelViewMatrix:this.gl.getUniformLocation(r,"uModelViewMatrix")}}loadShader(t,e){const r=this.gl.createShader(t);if(this.gl.shaderSource(r,e),this.gl.compileShader(r),!this.gl.getShaderParameter(r,this.gl.COMPILE_STATUS))throw this.gl.deleteShader(r),new Error(`An error occurred compiling the shaders: ${this.gl.getShaderInfoLog(r)}`);return r}}(new class{constructor(){this.scene=new o,this.program=new te(this.scene.context),this.virtualProgram=new ue(this.scene.context),this.camera=new Kt(this.scene.context,this.program,this.virtualProgram),this.surface=new se(this.scene.context,this.program,this.virtualProgram,30),this.control=new Qt,this.uniqueId=new ee(this.scene.context)}init(){this.setControls(),this.scene.setCamera(this.camera),this.scene.addObject(this.surface),this.scene.start()}setControls(){this.control.onChange((t,e,r)=>this.camera.control(this.scene.frameTime,t,e,r)),this.control.onResize(()=>{this.scene.configureSize(),this.camera.configure()}),this.control.onClick((t,e)=>{const r=document;if((r.pointerLockElement||r.mozPointerLockElement||r.webkitPointerLockElement)!==this.scene.canvas)return;t=window.innerWidth/2,e=window.innerHeight/2,this.scene.isVirtualRender=!0,this.scene.drawVirtual(0),e=this.scene.canvas.clientHeight-e;const n=new Uint8Array(4);this.scene.context.readPixels(t,e,1,1,this.scene.context.RGBA,this.scene.context.UNSIGNED_BYTE,n);const i=this.uniqueId.fromColor(n[0],n[1],n[2],n[3]);this.surface.addObjectUpTo(i),this.scene.isVirtualRender=!1,this.scene.draw(0)})}}).init()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,