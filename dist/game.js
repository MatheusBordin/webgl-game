!function(t){var e=window.webpackHotUpdate;window.webpackHotUpdate=function(t,n){!function(t,e){if(!g[t]||!b[t])return;for(var n in b[t]=!1,e)Object.prototype.hasOwnProperty.call(e,n)&&(p[n]=e[n]);0==--y&&0===M&&_()}(t,n),e&&e(t,n)};var n,r=!0,o="e39a995ec1c23acf7677",i=1e4,a={},s=[],u=[];function c(t){var e=z[t];if(!e)return A;var r=function(r){return e.hot.active?(z[r]?-1===z[r].parents.indexOf(t)&&z[r].parents.push(t):(s=[t],n=r),-1===e.children.indexOf(r)&&e.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+t),s=[]),A(r)},o=function(t){return{configurable:!0,enumerable:!0,get:function(){return A[t]},set:function(e){A[t]=e}}};for(var i in A)Object.prototype.hasOwnProperty.call(A,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(t){return"ready"===f&&d("prepare"),M++,A.e(t).then(e,function(t){throw e(),t});function e(){M--,"prepare"===f&&(m[t]||P(t),0===M&&0===y&&_())}},r.t=function(t,e){return 1&e&&(t=r(t)),A.t(t,-2&e)},r}var h=[],f="idle";function d(t){f=t;for(var e=0;e<h.length;e++)h[e].call(null,t)}var l,p,v,y=0,M=0,m={},b={},g={};function x(t){return+t+""===t?+t:t}function w(t){if("idle"!==f)throw new Error("check() is only allowed in idle status");return r=t,d("check"),function(t){return t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=A.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=t,r.send(null)}catch(t){return n(t)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(t){return void n(t)}e(t)}}})}(i).then(function(t){if(!t)return d("idle"),null;b={},m={},g=t.c,v=t.h,d("prepare");var e=new Promise(function(t,e){l={resolve:t,reject:e}});p={};return P(0),"prepare"===f&&0===M&&0===y&&_(),e})}function P(t){g[t]?(b[t]=!0,y++,function(t){var e=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=A.p+""+t+"."+o+".hot-update.js",e.appendChild(n)}(t)):m[t]=!0}function _(){d("ready");var t=l;if(l=null,t)if(r)Promise.resolve().then(function(){return k(r)}).then(function(e){t.resolve(e)},function(e){t.reject(e)});else{var e=[];for(var n in p)Object.prototype.hasOwnProperty.call(p,n)&&e.push(x(n));t.resolve(e)}}function k(e){if("ready"!==f)throw new Error("apply() is only allowed in ready status");var n,r,i,u,c;function h(t){for(var e=[t],n={},r=e.slice().map(function(t){return{chain:[t],id:t}});r.length>0;){var o=r.pop(),i=o.id,a=o.chain;if((u=z[i])&&!u.hot._selfAccepted){if(u.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(u.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var s=0;s<u.parents.length;s++){var c=u.parents[s],h=z[c];if(h){if(h.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([c]),moduleId:i,parentId:c};-1===e.indexOf(c)&&(h.hot._acceptedDependencies[i]?(n[c]||(n[c]=[]),l(n[c],[i])):(delete n[c],e.push(c),r.push({chain:a.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:t,outdatedModules:e,outdatedDependencies:n}}function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];-1===t.indexOf(r)&&t.push(r)}}e=e||{};var y={},M=[],m={},b=function(){console.warn("[HMR] unexpected require("+P.moduleId+") to disposed module")};for(var w in p)if(Object.prototype.hasOwnProperty.call(p,w)){var P;c=x(w);var _=!1,k=!1,E=!1,O="";switch((P=p[w]?h(c):{type:"disposed",moduleId:w}).chain&&(O="\nUpdate propagation: "+P.chain.join(" -> ")),P.type){case"self-declined":e.onDeclined&&e.onDeclined(P),e.ignoreDeclined||(_=new Error("Aborted because of self decline: "+P.moduleId+O));break;case"declined":e.onDeclined&&e.onDeclined(P),e.ignoreDeclined||(_=new Error("Aborted because of declined dependency: "+P.moduleId+" in "+P.parentId+O));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(P),e.ignoreUnaccepted||(_=new Error("Aborted because "+c+" is not accepted"+O));break;case"accepted":e.onAccepted&&e.onAccepted(P),k=!0;break;case"disposed":e.onDisposed&&e.onDisposed(P),E=!0;break;default:throw new Error("Unexception type "+P.type)}if(_)return d("abort"),Promise.reject(_);if(k)for(c in m[c]=p[c],l(M,P.outdatedModules),P.outdatedDependencies)Object.prototype.hasOwnProperty.call(P.outdatedDependencies,c)&&(y[c]||(y[c]=[]),l(y[c],P.outdatedDependencies[c]));E&&(l(M,[P.moduleId]),m[c]=b)}var C,R=[];for(r=0;r<M.length;r++)c=M[r],z[c]&&z[c].hot._selfAccepted&&R.push({module:c,errorHandler:z[c].hot._selfAccepted});d("dispose"),Object.keys(g).forEach(function(t){!1===g[t]&&function(t){delete installedChunks[t]}(t)});for(var S,j,D=M.slice();D.length>0;)if(c=D.pop(),u=z[c]){var I={},L=u.hot._disposeHandlers;for(i=0;i<L.length;i++)(n=L[i])(I);for(a[c]=I,u.hot.active=!1,delete z[c],delete y[c],i=0;i<u.children.length;i++){var q=z[u.children[i]];q&&((C=q.parents.indexOf(c))>=0&&q.parents.splice(C,1))}}for(c in y)if(Object.prototype.hasOwnProperty.call(y,c)&&(u=z[c]))for(j=y[c],i=0;i<j.length;i++)S=j[i],(C=u.children.indexOf(S))>=0&&u.children.splice(C,1);for(c in d("apply"),o=v,m)Object.prototype.hasOwnProperty.call(m,c)&&(t[c]=m[c]);var T=null;for(c in y)if(Object.prototype.hasOwnProperty.call(y,c)&&(u=z[c])){j=y[c];var B=[];for(r=0;r<j.length;r++)if(S=j[r],n=u.hot._acceptedDependencies[S]){if(-1!==B.indexOf(n))continue;B.push(n)}for(r=0;r<B.length;r++){n=B[r];try{n(j)}catch(t){e.onErrored&&e.onErrored({type:"accept-errored",moduleId:c,dependencyId:j[r],error:t}),e.ignoreErrored||T||(T=t)}}}for(r=0;r<R.length;r++){var F=R[r];c=F.module,s=[c];try{A(c)}catch(t){if("function"==typeof F.errorHandler)try{F.errorHandler(t)}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:c,error:n,originalError:t}),e.ignoreErrored||T||(T=n),T||(T=t)}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:c,error:t}),e.ignoreErrored||T||(T=t)}}return T?(d("fail"),Promise.reject(T)):(d("idle"),new Promise(function(t){t(M)}))}var z={};function A(e){if(z[e])return z[e].exports;var r=z[e]={i:e,l:!1,exports:{},hot:function(t){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==t,active:!0,accept:function(t,n){if(void 0===t)e._selfAccepted=!0;else if("function"==typeof t)e._selfAccepted=t;else if("object"==typeof t)for(var r=0;r<t.length;r++)e._acceptedDependencies[t[r]]=n||function(){};else e._acceptedDependencies[t]=n||function(){}},decline:function(t){if(void 0===t)e._selfDeclined=!0;else if("object"==typeof t)for(var n=0;n<t.length;n++)e._declinedDependencies[t[n]]=!0;else e._declinedDependencies[t]=!0},dispose:function(t){e._disposeHandlers.push(t)},addDisposeHandler:function(t){e._disposeHandlers.push(t)},removeDisposeHandler:function(t){var n=e._disposeHandlers.indexOf(t);n>=0&&e._disposeHandlers.splice(n,1)},check:w,apply:k,status:function(t){if(!t)return f;h.push(t)},addStatusHandler:function(t){h.push(t)},removeStatusHandler:function(t){var e=h.indexOf(t);e>=0&&h.splice(e,1)},data:a[t]};return n=void 0,e}(e),parents:(u=s,s=[],u),children:[]};return t[e].call(r.exports,r,r.exports,c(e)),r.l=!0,r.exports}A.m=t,A.c=z,A.d=function(t,e,n){A.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},A.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},A.t=function(t,e){if(1&e&&(t=A(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(A.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)A.d(n,r,function(e){return t[e]}.bind(null,r));return n},A.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return A.d(e,"a",e),e},A.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},A.p="",A.h=function(){return o},c(7)(A.s=7)}({7:function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"create",function(){return c}),n.d(r,"clone",function(){return h}),n.d(r,"copy",function(){return f}),n.d(r,"fromValues",function(){return d}),n.d(r,"set",function(){return l}),n.d(r,"identity",function(){return p}),n.d(r,"transpose",function(){return v}),n.d(r,"invert",function(){return y}),n.d(r,"adjoint",function(){return M}),n.d(r,"determinant",function(){return m}),n.d(r,"multiply",function(){return b}),n.d(r,"translate",function(){return g}),n.d(r,"scale",function(){return x}),n.d(r,"rotate",function(){return w}),n.d(r,"rotateX",function(){return P}),n.d(r,"rotateY",function(){return _}),n.d(r,"rotateZ",function(){return k}),n.d(r,"fromTranslation",function(){return z}),n.d(r,"fromScaling",function(){return A}),n.d(r,"fromRotation",function(){return E}),n.d(r,"fromXRotation",function(){return O}),n.d(r,"fromYRotation",function(){return C}),n.d(r,"fromZRotation",function(){return R}),n.d(r,"fromRotationTranslation",function(){return S}),n.d(r,"fromQuat2",function(){return j}),n.d(r,"getTranslation",function(){return D}),n.d(r,"getScaling",function(){return I}),n.d(r,"getRotation",function(){return L}),n.d(r,"fromRotationTranslationScale",function(){return q}),n.d(r,"fromRotationTranslationScaleOrigin",function(){return T}),n.d(r,"fromQuat",function(){return B}),n.d(r,"frustum",function(){return F}),n.d(r,"perspective",function(){return U}),n.d(r,"perspectiveFromFieldOfView",function(){return H}),n.d(r,"ortho",function(){return V}),n.d(r,"lookAt",function(){return Y}),n.d(r,"targetTo",function(){return N}),n.d(r,"str",function(){return X}),n.d(r,"frob",function(){return W}),n.d(r,"add",function(){return G}),n.d(r,"subtract",function(){return K}),n.d(r,"multiplyScalar",function(){return Q}),n.d(r,"multiplyScalarAndAdd",function(){return Z}),n.d(r,"exactEquals",function(){return J}),n.d(r,"equals",function(){return $}),n.d(r,"mul",function(){return tt}),n.d(r,"sub",function(){return et});var o={};n.r(o),n.d(o,"create",function(){return nt}),n.d(o,"clone",function(){return rt}),n.d(o,"length",function(){return ot}),n.d(o,"fromValues",function(){return it}),n.d(o,"copy",function(){return at}),n.d(o,"set",function(){return st}),n.d(o,"add",function(){return ut}),n.d(o,"subtract",function(){return ct}),n.d(o,"multiply",function(){return ht}),n.d(o,"divide",function(){return ft}),n.d(o,"ceil",function(){return dt}),n.d(o,"floor",function(){return lt}),n.d(o,"min",function(){return pt}),n.d(o,"max",function(){return vt}),n.d(o,"round",function(){return yt}),n.d(o,"scale",function(){return Mt}),n.d(o,"scaleAndAdd",function(){return mt}),n.d(o,"distance",function(){return bt}),n.d(o,"squaredDistance",function(){return gt}),n.d(o,"squaredLength",function(){return xt}),n.d(o,"negate",function(){return wt}),n.d(o,"inverse",function(){return Pt}),n.d(o,"normalize",function(){return _t}),n.d(o,"dot",function(){return kt}),n.d(o,"cross",function(){return zt}),n.d(o,"lerp",function(){return At}),n.d(o,"hermite",function(){return Et}),n.d(o,"bezier",function(){return Ot}),n.d(o,"random",function(){return Ct}),n.d(o,"transformMat4",function(){return Rt}),n.d(o,"transformMat3",function(){return St}),n.d(o,"transformQuat",function(){return jt}),n.d(o,"rotateX",function(){return Dt}),n.d(o,"rotateY",function(){return It}),n.d(o,"rotateZ",function(){return Lt}),n.d(o,"angle",function(){return qt}),n.d(o,"str",function(){return Tt}),n.d(o,"exactEquals",function(){return Bt}),n.d(o,"equals",function(){return Ft}),n.d(o,"sub",function(){return Ut}),n.d(o,"mul",function(){return Ht}),n.d(o,"div",function(){return Vt}),n.d(o,"dist",function(){return Yt}),n.d(o,"sqrDist",function(){return Nt}),n.d(o,"len",function(){return Xt}),n.d(o,"sqrLen",function(){return Wt}),n.d(o,"forEach",function(){return Gt});var i=function(){function t(){this.prevTime=0,this.objects=[];try{if(this.canvas=document.getElementById("game"),this.gl=this.canvas.getContext("webgl")||this.canvas.getContext("experimental-webgl"),this.requestPointerLock(),this.canvas.addEventListener("click",this.requestPointerLock.bind(this)),this.configureSize(),!this.gl)throw new Error("Unable to initialize WebGL. Your browser or machine may not support it.")}catch(t){console.log(t.message||t)}}return Object.defineProperty(t.prototype,"context",{get:function(){return this.gl},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"frameTime",{get:function(){return this.prevTime},enumerable:!0,configurable:!0}),t.prototype.start=function(){this.render(0)},t.prototype.requestPointerLock=function(){var t=this.canvas;(t.requestPointerLock||t.webkitRequestPointerLock||t.mozRequestPointerLock||t.msRequestPointerLock||t.oRequestPointerLock||function(){}).call(t)},t.prototype.configureSize=function(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight},t.prototype.addObject=function(){for(var t,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];(t=this.objects).push.apply(t,e)},t.prototype.setCamera=function(t){this.camera=t},t.prototype.render=function(t){var e=.001*t,n=e-this.prevTime;this.prevTime=e,this.draw(n),requestAnimationFrame(this.render.bind(this))},t.prototype.draw=function(t){this.gl.clearColor(0,0,0,1),this.gl.clearDepth(1),this.gl.enable(this.gl.DEPTH_TEST),this.gl.depthFunc(this.gl.LEQUAL),this.gl.viewport(0,0,window.innerWidth,window.innerHeight),this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT),this.camera.draw();for(var e=0,n=this.objects;e<n.length;e++){n[e].draw(t)}},t}(),a=1e-6,s="undefined"!=typeof Float32Array?Float32Array:Array,u=Math.random;Math.PI;function c(){var t=new s(16);return s!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function h(t){var e=new s(16);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function f(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function d(t,e,n,r,o,i,a,u,c,h,f,d,l,p,v,y){var M=new s(16);return M[0]=t,M[1]=e,M[2]=n,M[3]=r,M[4]=o,M[5]=i,M[6]=a,M[7]=u,M[8]=c,M[9]=h,M[10]=f,M[11]=d,M[12]=l,M[13]=p,M[14]=v,M[15]=y,M}function l(t,e,n,r,o,i,a,s,u,c,h,f,d,l,p,v,y){return t[0]=e,t[1]=n,t[2]=r,t[3]=o,t[4]=i,t[5]=a,t[6]=s,t[7]=u,t[8]=c,t[9]=h,t[10]=f,t[11]=d,t[12]=l,t[13]=p,t[14]=v,t[15]=y,t}function p(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function v(t,e){if(t===e){var n=e[1],r=e[2],o=e[3],i=e[6],a=e[7],s=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=n,t[6]=e[9],t[7]=e[13],t[8]=r,t[9]=i,t[11]=e[14],t[12]=o,t[13]=a,t[14]=s}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function y(t,e){var n=e[0],r=e[1],o=e[2],i=e[3],a=e[4],s=e[5],u=e[6],c=e[7],h=e[8],f=e[9],d=e[10],l=e[11],p=e[12],v=e[13],y=e[14],M=e[15],m=n*s-r*a,b=n*u-o*a,g=n*c-i*a,x=r*u-o*s,w=r*c-i*s,P=o*c-i*u,_=h*v-f*p,k=h*y-d*p,z=h*M-l*p,A=f*y-d*v,E=f*M-l*v,O=d*M-l*y,C=m*O-b*E+g*A+x*z-w*k+P*_;return C?(C=1/C,t[0]=(s*O-u*E+c*A)*C,t[1]=(o*E-r*O-i*A)*C,t[2]=(v*P-y*w+M*x)*C,t[3]=(d*w-f*P-l*x)*C,t[4]=(u*z-a*O-c*k)*C,t[5]=(n*O-o*z+i*k)*C,t[6]=(y*g-p*P-M*b)*C,t[7]=(h*P-d*g+l*b)*C,t[8]=(a*E-s*z+c*_)*C,t[9]=(r*z-n*E-i*_)*C,t[10]=(p*w-v*g+M*m)*C,t[11]=(f*g-h*w-l*m)*C,t[12]=(s*k-a*A-u*_)*C,t[13]=(n*A-r*k+o*_)*C,t[14]=(v*b-p*x-y*m)*C,t[15]=(h*x-f*b+d*m)*C,t):null}function M(t,e){var n=e[0],r=e[1],o=e[2],i=e[3],a=e[4],s=e[5],u=e[6],c=e[7],h=e[8],f=e[9],d=e[10],l=e[11],p=e[12],v=e[13],y=e[14],M=e[15];return t[0]=s*(d*M-l*y)-f*(u*M-c*y)+v*(u*l-c*d),t[1]=-(r*(d*M-l*y)-f*(o*M-i*y)+v*(o*l-i*d)),t[2]=r*(u*M-c*y)-s*(o*M-i*y)+v*(o*c-i*u),t[3]=-(r*(u*l-c*d)-s*(o*l-i*d)+f*(o*c-i*u)),t[4]=-(a*(d*M-l*y)-h*(u*M-c*y)+p*(u*l-c*d)),t[5]=n*(d*M-l*y)-h*(o*M-i*y)+p*(o*l-i*d),t[6]=-(n*(u*M-c*y)-a*(o*M-i*y)+p*(o*c-i*u)),t[7]=n*(u*l-c*d)-a*(o*l-i*d)+h*(o*c-i*u),t[8]=a*(f*M-l*v)-h*(s*M-c*v)+p*(s*l-c*f),t[9]=-(n*(f*M-l*v)-h*(r*M-i*v)+p*(r*l-i*f)),t[10]=n*(s*M-c*v)-a*(r*M-i*v)+p*(r*c-i*s),t[11]=-(n*(s*l-c*f)-a*(r*l-i*f)+h*(r*c-i*s)),t[12]=-(a*(f*y-d*v)-h*(s*y-u*v)+p*(s*d-u*f)),t[13]=n*(f*y-d*v)-h*(r*y-o*v)+p*(r*d-o*f),t[14]=-(n*(s*y-u*v)-a*(r*y-o*v)+p*(r*u-o*s)),t[15]=n*(s*d-u*f)-a*(r*d-o*f)+h*(r*u-o*s),t}function m(t){var e=t[0],n=t[1],r=t[2],o=t[3],i=t[4],a=t[5],s=t[6],u=t[7],c=t[8],h=t[9],f=t[10],d=t[11],l=t[12],p=t[13],v=t[14],y=t[15];return(e*a-n*i)*(f*y-d*v)-(e*s-r*i)*(h*y-d*p)+(e*u-o*i)*(h*v-f*p)+(n*s-r*a)*(c*y-d*l)-(n*u-o*a)*(c*v-f*l)+(r*u-o*s)*(c*p-h*l)}function b(t,e,n){var r=e[0],o=e[1],i=e[2],a=e[3],s=e[4],u=e[5],c=e[6],h=e[7],f=e[8],d=e[9],l=e[10],p=e[11],v=e[12],y=e[13],M=e[14],m=e[15],b=n[0],g=n[1],x=n[2],w=n[3];return t[0]=b*r+g*s+x*f+w*v,t[1]=b*o+g*u+x*d+w*y,t[2]=b*i+g*c+x*l+w*M,t[3]=b*a+g*h+x*p+w*m,b=n[4],g=n[5],x=n[6],w=n[7],t[4]=b*r+g*s+x*f+w*v,t[5]=b*o+g*u+x*d+w*y,t[6]=b*i+g*c+x*l+w*M,t[7]=b*a+g*h+x*p+w*m,b=n[8],g=n[9],x=n[10],w=n[11],t[8]=b*r+g*s+x*f+w*v,t[9]=b*o+g*u+x*d+w*y,t[10]=b*i+g*c+x*l+w*M,t[11]=b*a+g*h+x*p+w*m,b=n[12],g=n[13],x=n[14],w=n[15],t[12]=b*r+g*s+x*f+w*v,t[13]=b*o+g*u+x*d+w*y,t[14]=b*i+g*c+x*l+w*M,t[15]=b*a+g*h+x*p+w*m,t}function g(t,e,n){var r=n[0],o=n[1],i=n[2],a=void 0,s=void 0,u=void 0,c=void 0,h=void 0,f=void 0,d=void 0,l=void 0,p=void 0,v=void 0,y=void 0,M=void 0;return e===t?(t[12]=e[0]*r+e[4]*o+e[8]*i+e[12],t[13]=e[1]*r+e[5]*o+e[9]*i+e[13],t[14]=e[2]*r+e[6]*o+e[10]*i+e[14],t[15]=e[3]*r+e[7]*o+e[11]*i+e[15]):(a=e[0],s=e[1],u=e[2],c=e[3],h=e[4],f=e[5],d=e[6],l=e[7],p=e[8],v=e[9],y=e[10],M=e[11],t[0]=a,t[1]=s,t[2]=u,t[3]=c,t[4]=h,t[5]=f,t[6]=d,t[7]=l,t[8]=p,t[9]=v,t[10]=y,t[11]=M,t[12]=a*r+h*o+p*i+e[12],t[13]=s*r+f*o+v*i+e[13],t[14]=u*r+d*o+y*i+e[14],t[15]=c*r+l*o+M*i+e[15]),t}function x(t,e,n){var r=n[0],o=n[1],i=n[2];return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*o,t[5]=e[5]*o,t[6]=e[6]*o,t[7]=e[7]*o,t[8]=e[8]*i,t[9]=e[9]*i,t[10]=e[10]*i,t[11]=e[11]*i,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function w(t,e,n,r){var o,i,s,u,c,h,f,d,l,p,v,y,M,m,b,g,x,w,P,_,k,z,A,E,O=r[0],C=r[1],R=r[2],S=Math.sqrt(O*O+C*C+R*R);return S<a?null:(O*=S=1/S,C*=S,R*=S,o=Math.sin(n),s=1-(i=Math.cos(n)),u=e[0],c=e[1],h=e[2],f=e[3],d=e[4],l=e[5],p=e[6],v=e[7],y=e[8],M=e[9],m=e[10],b=e[11],g=O*O*s+i,x=C*O*s+R*o,w=R*O*s-C*o,P=O*C*s-R*o,_=C*C*s+i,k=R*C*s+O*o,z=O*R*s+C*o,A=C*R*s-O*o,E=R*R*s+i,t[0]=u*g+d*x+y*w,t[1]=c*g+l*x+M*w,t[2]=h*g+p*x+m*w,t[3]=f*g+v*x+b*w,t[4]=u*P+d*_+y*k,t[5]=c*P+l*_+M*k,t[6]=h*P+p*_+m*k,t[7]=f*P+v*_+b*k,t[8]=u*z+d*A+y*E,t[9]=c*z+l*A+M*E,t[10]=h*z+p*A+m*E,t[11]=f*z+v*A+b*E,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function P(t,e,n){var r=Math.sin(n),o=Math.cos(n),i=e[4],a=e[5],s=e[6],u=e[7],c=e[8],h=e[9],f=e[10],d=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=i*o+c*r,t[5]=a*o+h*r,t[6]=s*o+f*r,t[7]=u*o+d*r,t[8]=c*o-i*r,t[9]=h*o-a*r,t[10]=f*o-s*r,t[11]=d*o-u*r,t}function _(t,e,n){var r=Math.sin(n),o=Math.cos(n),i=e[0],a=e[1],s=e[2],u=e[3],c=e[8],h=e[9],f=e[10],d=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=i*o-c*r,t[1]=a*o-h*r,t[2]=s*o-f*r,t[3]=u*o-d*r,t[8]=i*r+c*o,t[9]=a*r+h*o,t[10]=s*r+f*o,t[11]=u*r+d*o,t}function k(t,e,n){var r=Math.sin(n),o=Math.cos(n),i=e[0],a=e[1],s=e[2],u=e[3],c=e[4],h=e[5],f=e[6],d=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=i*o+c*r,t[1]=a*o+h*r,t[2]=s*o+f*r,t[3]=u*o+d*r,t[4]=c*o-i*r,t[5]=h*o-a*r,t[6]=f*o-s*r,t[7]=d*o-u*r,t}function z(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function A(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function E(t,e,n){var r,o,i,s=n[0],u=n[1],c=n[2],h=Math.sqrt(s*s+u*u+c*c);return h<a?null:(s*=h=1/h,u*=h,c*=h,r=Math.sin(e),i=1-(o=Math.cos(e)),t[0]=s*s*i+o,t[1]=u*s*i+c*r,t[2]=c*s*i-u*r,t[3]=0,t[4]=s*u*i-c*r,t[5]=u*u*i+o,t[6]=c*u*i+s*r,t[7]=0,t[8]=s*c*i+u*r,t[9]=u*c*i-s*r,t[10]=c*c*i+o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function O(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=n,t[7]=0,t[8]=0,t[9]=-n,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function C(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=0,t[2]=-n,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=n,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function R(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=n,t[2]=0,t[3]=0,t[4]=-n,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function S(t,e,n){var r=e[0],o=e[1],i=e[2],a=e[3],s=r+r,u=o+o,c=i+i,h=r*s,f=r*u,d=r*c,l=o*u,p=o*c,v=i*c,y=a*s,M=a*u,m=a*c;return t[0]=1-(l+v),t[1]=f+m,t[2]=d-M,t[3]=0,t[4]=f-m,t[5]=1-(h+v),t[6]=p+y,t[7]=0,t[8]=d+M,t[9]=p-y,t[10]=1-(h+l),t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function j(t,e){var n=new s(3),r=-e[0],o=-e[1],i=-e[2],a=e[3],u=e[4],c=e[5],h=e[6],f=e[7],d=r*r+o*o+i*i+a*a;return d>0?(n[0]=2*(u*a+f*r+c*i-h*o)/d,n[1]=2*(c*a+f*o+h*r-u*i)/d,n[2]=2*(h*a+f*i+u*o-c*r)/d):(n[0]=2*(u*a+f*r+c*i-h*o),n[1]=2*(c*a+f*o+h*r-u*i),n[2]=2*(h*a+f*i+u*o-c*r)),S(t,e,n),t}function D(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function I(t,e){var n=e[0],r=e[1],o=e[2],i=e[4],a=e[5],s=e[6],u=e[8],c=e[9],h=e[10];return t[0]=Math.sqrt(n*n+r*r+o*o),t[1]=Math.sqrt(i*i+a*a+s*s),t[2]=Math.sqrt(u*u+c*c+h*h),t}function L(t,e){var n=e[0]+e[5]+e[10],r=0;return n>0?(r=2*Math.sqrt(n+1),t[3]=.25*r,t[0]=(e[6]-e[9])/r,t[1]=(e[8]-e[2])/r,t[2]=(e[1]-e[4])/r):e[0]>e[5]&&e[0]>e[10]?(r=2*Math.sqrt(1+e[0]-e[5]-e[10]),t[3]=(e[6]-e[9])/r,t[0]=.25*r,t[1]=(e[1]+e[4])/r,t[2]=(e[8]+e[2])/r):e[5]>e[10]?(r=2*Math.sqrt(1+e[5]-e[0]-e[10]),t[3]=(e[8]-e[2])/r,t[0]=(e[1]+e[4])/r,t[1]=.25*r,t[2]=(e[6]+e[9])/r):(r=2*Math.sqrt(1+e[10]-e[0]-e[5]),t[3]=(e[1]-e[4])/r,t[0]=(e[8]+e[2])/r,t[1]=(e[6]+e[9])/r,t[2]=.25*r),t}function q(t,e,n,r){var o=e[0],i=e[1],a=e[2],s=e[3],u=o+o,c=i+i,h=a+a,f=o*u,d=o*c,l=o*h,p=i*c,v=i*h,y=a*h,M=s*u,m=s*c,b=s*h,g=r[0],x=r[1],w=r[2];return t[0]=(1-(p+y))*g,t[1]=(d+b)*g,t[2]=(l-m)*g,t[3]=0,t[4]=(d-b)*x,t[5]=(1-(f+y))*x,t[6]=(v+M)*x,t[7]=0,t[8]=(l+m)*w,t[9]=(v-M)*w,t[10]=(1-(f+p))*w,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function T(t,e,n,r,o){var i=e[0],a=e[1],s=e[2],u=e[3],c=i+i,h=a+a,f=s+s,d=i*c,l=i*h,p=i*f,v=a*h,y=a*f,M=s*f,m=u*c,b=u*h,g=u*f,x=r[0],w=r[1],P=r[2],_=o[0],k=o[1],z=o[2],A=(1-(v+M))*x,E=(l+g)*x,O=(p-b)*x,C=(l-g)*w,R=(1-(d+M))*w,S=(y+m)*w,j=(p+b)*P,D=(y-m)*P,I=(1-(d+v))*P;return t[0]=A,t[1]=E,t[2]=O,t[3]=0,t[4]=C,t[5]=R,t[6]=S,t[7]=0,t[8]=j,t[9]=D,t[10]=I,t[11]=0,t[12]=n[0]+_-(A*_+C*k+j*z),t[13]=n[1]+k-(E*_+R*k+D*z),t[14]=n[2]+z-(O*_+S*k+I*z),t[15]=1,t}function B(t,e){var n=e[0],r=e[1],o=e[2],i=e[3],a=n+n,s=r+r,u=o+o,c=n*a,h=r*a,f=r*s,d=o*a,l=o*s,p=o*u,v=i*a,y=i*s,M=i*u;return t[0]=1-f-p,t[1]=h+M,t[2]=d-y,t[3]=0,t[4]=h-M,t[5]=1-c-p,t[6]=l+v,t[7]=0,t[8]=d+y,t[9]=l-v,t[10]=1-c-f,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function F(t,e,n,r,o,i,a){var s=1/(n-e),u=1/(o-r),c=1/(i-a);return t[0]=2*i*s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*i*u,t[6]=0,t[7]=0,t[8]=(n+e)*s,t[9]=(o+r)*u,t[10]=(a+i)*c,t[11]=-1,t[12]=0,t[13]=0,t[14]=a*i*2*c,t[15]=0,t}function U(t,e,n,r,o){var i=1/Math.tan(e/2),a=void 0;return t[0]=i/n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=i,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=o&&o!==1/0?(a=1/(r-o),t[10]=(o+r)*a,t[14]=2*o*r*a):(t[10]=-1,t[14]=-2*r),t}function H(t,e,n,r){var o=Math.tan(e.upDegrees*Math.PI/180),i=Math.tan(e.downDegrees*Math.PI/180),a=Math.tan(e.leftDegrees*Math.PI/180),s=Math.tan(e.rightDegrees*Math.PI/180),u=2/(a+s),c=2/(o+i);return t[0]=u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=c,t[6]=0,t[7]=0,t[8]=-(a-s)*u*.5,t[9]=(o-i)*c*.5,t[10]=r/(n-r),t[11]=-1,t[12]=0,t[13]=0,t[14]=r*n/(n-r),t[15]=0,t}function V(t,e,n,r,o,i,a){var s=1/(e-n),u=1/(r-o),c=1/(i-a);return t[0]=-2*s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*u,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*c,t[11]=0,t[12]=(e+n)*s,t[13]=(o+r)*u,t[14]=(a+i)*c,t[15]=1,t}function Y(t,e,n,r){var o=void 0,i=void 0,s=void 0,u=void 0,c=void 0,h=void 0,f=void 0,d=void 0,l=void 0,v=void 0,y=e[0],M=e[1],m=e[2],b=r[0],g=r[1],x=r[2],w=n[0],P=n[1],_=n[2];return Math.abs(y-w)<a&&Math.abs(M-P)<a&&Math.abs(m-_)<a?p(t):(f=y-w,d=M-P,l=m-_,o=g*(l*=v=1/Math.sqrt(f*f+d*d+l*l))-x*(d*=v),i=x*(f*=v)-b*l,s=b*d-g*f,(v=Math.sqrt(o*o+i*i+s*s))?(o*=v=1/v,i*=v,s*=v):(o=0,i=0,s=0),u=d*s-l*i,c=l*o-f*s,h=f*i-d*o,(v=Math.sqrt(u*u+c*c+h*h))?(u*=v=1/v,c*=v,h*=v):(u=0,c=0,h=0),t[0]=o,t[1]=u,t[2]=f,t[3]=0,t[4]=i,t[5]=c,t[6]=d,t[7]=0,t[8]=s,t[9]=h,t[10]=l,t[11]=0,t[12]=-(o*y+i*M+s*m),t[13]=-(u*y+c*M+h*m),t[14]=-(f*y+d*M+l*m),t[15]=1,t)}function N(t,e,n,r){var o=e[0],i=e[1],a=e[2],s=r[0],u=r[1],c=r[2],h=o-n[0],f=i-n[1],d=a-n[2],l=h*h+f*f+d*d;l>0&&(h*=l=1/Math.sqrt(l),f*=l,d*=l);var p=u*d-c*f,v=c*h-s*d,y=s*f-u*h;return(l=p*p+v*v+y*y)>0&&(p*=l=1/Math.sqrt(l),v*=l,y*=l),t[0]=p,t[1]=v,t[2]=y,t[3]=0,t[4]=f*y-d*v,t[5]=d*p-h*y,t[6]=h*v-f*p,t[7]=0,t[8]=h,t[9]=f,t[10]=d,t[11]=0,t[12]=o,t[13]=i,t[14]=a,t[15]=1,t}function X(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function W(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2)+Math.pow(t[9],2)+Math.pow(t[10],2)+Math.pow(t[11],2)+Math.pow(t[12],2)+Math.pow(t[13],2)+Math.pow(t[14],2)+Math.pow(t[15],2))}function G(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t[6]=e[6]+n[6],t[7]=e[7]+n[7],t[8]=e[8]+n[8],t[9]=e[9]+n[9],t[10]=e[10]+n[10],t[11]=e[11]+n[11],t[12]=e[12]+n[12],t[13]=e[13]+n[13],t[14]=e[14]+n[14],t[15]=e[15]+n[15],t}function K(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t[4]=e[4]-n[4],t[5]=e[5]-n[5],t[6]=e[6]-n[6],t[7]=e[7]-n[7],t[8]=e[8]-n[8],t[9]=e[9]-n[9],t[10]=e[10]-n[10],t[11]=e[11]-n[11],t[12]=e[12]-n[12],t[13]=e[13]-n[13],t[14]=e[14]-n[14],t[15]=e[15]-n[15],t}function Q(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12]*n,t[13]=e[13]*n,t[14]=e[14]*n,t[15]=e[15]*n,t}function Z(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t[3]=e[3]+n[3]*r,t[4]=e[4]+n[4]*r,t[5]=e[5]+n[5]*r,t[6]=e[6]+n[6]*r,t[7]=e[7]+n[7]*r,t[8]=e[8]+n[8]*r,t[9]=e[9]+n[9]*r,t[10]=e[10]+n[10]*r,t[11]=e[11]+n[11]*r,t[12]=e[12]+n[12]*r,t[13]=e[13]+n[13]*r,t[14]=e[14]+n[14]*r,t[15]=e[15]+n[15]*r,t}function J(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]}function $(t,e){var n=t[0],r=t[1],o=t[2],i=t[3],s=t[4],u=t[5],c=t[6],h=t[7],f=t[8],d=t[9],l=t[10],p=t[11],v=t[12],y=t[13],M=t[14],m=t[15],b=e[0],g=e[1],x=e[2],w=e[3],P=e[4],_=e[5],k=e[6],z=e[7],A=e[8],E=e[9],O=e[10],C=e[11],R=e[12],S=e[13],j=e[14],D=e[15];return Math.abs(n-b)<=a*Math.max(1,Math.abs(n),Math.abs(b))&&Math.abs(r-g)<=a*Math.max(1,Math.abs(r),Math.abs(g))&&Math.abs(o-x)<=a*Math.max(1,Math.abs(o),Math.abs(x))&&Math.abs(i-w)<=a*Math.max(1,Math.abs(i),Math.abs(w))&&Math.abs(s-P)<=a*Math.max(1,Math.abs(s),Math.abs(P))&&Math.abs(u-_)<=a*Math.max(1,Math.abs(u),Math.abs(_))&&Math.abs(c-k)<=a*Math.max(1,Math.abs(c),Math.abs(k))&&Math.abs(h-z)<=a*Math.max(1,Math.abs(h),Math.abs(z))&&Math.abs(f-A)<=a*Math.max(1,Math.abs(f),Math.abs(A))&&Math.abs(d-E)<=a*Math.max(1,Math.abs(d),Math.abs(E))&&Math.abs(l-O)<=a*Math.max(1,Math.abs(l),Math.abs(O))&&Math.abs(p-C)<=a*Math.max(1,Math.abs(p),Math.abs(C))&&Math.abs(v-R)<=a*Math.max(1,Math.abs(v),Math.abs(R))&&Math.abs(y-S)<=a*Math.max(1,Math.abs(y),Math.abs(S))&&Math.abs(M-j)<=a*Math.max(1,Math.abs(M),Math.abs(j))&&Math.abs(m-D)<=a*Math.max(1,Math.abs(m),Math.abs(D))}var tt=b,et=K;function nt(){var t=new s(3);return s!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function rt(t){var e=new s(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function ot(t){var e=t[0],n=t[1],r=t[2];return Math.sqrt(e*e+n*n+r*r)}function it(t,e,n){var r=new s(3);return r[0]=t,r[1]=e,r[2]=n,r}function at(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function st(t,e,n,r){return t[0]=e,t[1]=n,t[2]=r,t}function ut(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t}function ct(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t}function ht(t,e,n){return t[0]=e[0]*n[0],t[1]=e[1]*n[1],t[2]=e[2]*n[2],t}function ft(t,e,n){return t[0]=e[0]/n[0],t[1]=e[1]/n[1],t[2]=e[2]/n[2],t}function dt(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t}function lt(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t}function pt(t,e,n){return t[0]=Math.min(e[0],n[0]),t[1]=Math.min(e[1],n[1]),t[2]=Math.min(e[2],n[2]),t}function vt(t,e,n){return t[0]=Math.max(e[0],n[0]),t[1]=Math.max(e[1],n[1]),t[2]=Math.max(e[2],n[2]),t}function yt(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t}function Mt(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function mt(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t}function bt(t,e){var n=e[0]-t[0],r=e[1]-t[1],o=e[2]-t[2];return Math.sqrt(n*n+r*r+o*o)}function gt(t,e){var n=e[0]-t[0],r=e[1]-t[1],o=e[2]-t[2];return n*n+r*r+o*o}function xt(t){var e=t[0],n=t[1],r=t[2];return e*e+n*n+r*r}function wt(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function Pt(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function _t(t,e){var n=e[0],r=e[1],o=e[2],i=n*n+r*r+o*o;return i>0&&(i=1/Math.sqrt(i),t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i),t}function kt(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function zt(t,e,n){var r=e[0],o=e[1],i=e[2],a=n[0],s=n[1],u=n[2];return t[0]=o*u-i*s,t[1]=i*a-r*u,t[2]=r*s-o*a,t}function At(t,e,n,r){var o=e[0],i=e[1],a=e[2];return t[0]=o+r*(n[0]-o),t[1]=i+r*(n[1]-i),t[2]=a+r*(n[2]-a),t}function Et(t,e,n,r,o,i){var a=i*i,s=a*(2*i-3)+1,u=a*(i-2)+i,c=a*(i-1),h=a*(3-2*i);return t[0]=e[0]*s+n[0]*u+r[0]*c+o[0]*h,t[1]=e[1]*s+n[1]*u+r[1]*c+o[1]*h,t[2]=e[2]*s+n[2]*u+r[2]*c+o[2]*h,t}function Ot(t,e,n,r,o,i){var a=1-i,s=a*a,u=i*i,c=s*a,h=3*i*s,f=3*u*a,d=u*i;return t[0]=e[0]*c+n[0]*h+r[0]*f+o[0]*d,t[1]=e[1]*c+n[1]*h+r[1]*f+o[1]*d,t[2]=e[2]*c+n[2]*h+r[2]*f+o[2]*d,t}function Ct(t,e){e=e||1;var n=2*u()*Math.PI,r=2*u()-1,o=Math.sqrt(1-r*r)*e;return t[0]=Math.cos(n)*o,t[1]=Math.sin(n)*o,t[2]=r*e,t}function Rt(t,e,n){var r=e[0],o=e[1],i=e[2],a=n[3]*r+n[7]*o+n[11]*i+n[15];return a=a||1,t[0]=(n[0]*r+n[4]*o+n[8]*i+n[12])/a,t[1]=(n[1]*r+n[5]*o+n[9]*i+n[13])/a,t[2]=(n[2]*r+n[6]*o+n[10]*i+n[14])/a,t}function St(t,e,n){var r=e[0],o=e[1],i=e[2];return t[0]=r*n[0]+o*n[3]+i*n[6],t[1]=r*n[1]+o*n[4]+i*n[7],t[2]=r*n[2]+o*n[5]+i*n[8],t}function jt(t,e,n){var r=n[0],o=n[1],i=n[2],a=n[3],s=e[0],u=e[1],c=e[2],h=o*c-i*u,f=i*s-r*c,d=r*u-o*s,l=o*d-i*f,p=i*h-r*d,v=r*f-o*h,y=2*a;return h*=y,f*=y,d*=y,l*=2,p*=2,v*=2,t[0]=s+h+l,t[1]=u+f+p,t[2]=c+d+v,t}function Dt(t,e,n,r){var o=[],i=[];return o[0]=e[0]-n[0],o[1]=e[1]-n[1],o[2]=e[2]-n[2],i[0]=o[0],i[1]=o[1]*Math.cos(r)-o[2]*Math.sin(r),i[2]=o[1]*Math.sin(r)+o[2]*Math.cos(r),t[0]=i[0]+n[0],t[1]=i[1]+n[1],t[2]=i[2]+n[2],t}function It(t,e,n,r){var o=[],i=[];return o[0]=e[0]-n[0],o[1]=e[1]-n[1],o[2]=e[2]-n[2],i[0]=o[2]*Math.sin(r)+o[0]*Math.cos(r),i[1]=o[1],i[2]=o[2]*Math.cos(r)-o[0]*Math.sin(r),t[0]=i[0]+n[0],t[1]=i[1]+n[1],t[2]=i[2]+n[2],t}function Lt(t,e,n,r){var o=[],i=[];return o[0]=e[0]-n[0],o[1]=e[1]-n[1],o[2]=e[2]-n[2],i[0]=o[0]*Math.cos(r)-o[1]*Math.sin(r),i[1]=o[0]*Math.sin(r)+o[1]*Math.cos(r),i[2]=o[2],t[0]=i[0]+n[0],t[1]=i[1]+n[1],t[2]=i[2]+n[2],t}function qt(t,e){var n=it(t[0],t[1],t[2]),r=it(e[0],e[1],e[2]);_t(n,n),_t(r,r);var o=kt(n,r);return o>1?0:o<-1?Math.PI:Math.acos(o)}function Tt(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function Bt(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}function Ft(t,e){var n=t[0],r=t[1],o=t[2],i=e[0],s=e[1],u=e[2];return Math.abs(n-i)<=a*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(r-s)<=a*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(o-u)<=a*Math.max(1,Math.abs(o),Math.abs(u))}var Ut=ct,Ht=ht,Vt=ft,Yt=bt,Nt=gt,Xt=ot,Wt=xt,Gt=function(){var t=nt();return function(e,n,r,o,i,a){var s=void 0,u=void 0;for(n||(n=3),r||(r=0),u=o?Math.min(o*n+r,e.length):e.length,s=r;s<u;s+=n)t[0]=e[s],t[1]=e[s+1],t[2]=e[s+2],i(t,t,a),e[s]=t[0],e[s+1]=t[1],e[s+2]=t[2];return e}}(),Kt=function(){function t(t,e,n,i,a,s){void 0===n&&(n=45*Math.PI/180),void 0===i&&(i=.1),void 0===a&&(a=100),this.gl=t,this.program=e,this.fieldOfView=n,this.zNear=i,this.zFar=a,this.aspect=s,this.position=o.create(),this.rotation=o.create(),this.movementSpeed=12.5,this.rotationSpeed=.01,this.projectionMatrix=r.create(),this.configure(),this.position[0]=100,this.position[1]=-8,this.position[2]=40}return t.prototype.draw=function(){this.gl.useProgram(this.program.program),this.gl.uniformMatrix4fv(this.program.uniformLocations.projectionMatrix,!1,this.projectionMatrix),this.gl.uniformMatrix4fv(this.program.uniformLocations.modelViewMatrix,!1,this.modelViewMatrix)},t.prototype.configure=function(){this.aspect=this.gl.canvas.clientWidth/this.gl.canvas.clientHeight,r.perspective(this.projectionMatrix,this.fieldOfView,this.aspect,this.zNear,this.zFar)},t.prototype.control=function(t,e,n,r){var o=this.movementSpeed*t/1e3,i={x:0,y:0,z:0};e.front?i.z-=o:e.back&&(i.z+=o),e.left?i.x+=o:e.right&&(i.x-=o),e.up?i.y-=o:e.down&&(i.y+=o),this.moveByDirection(i),this.rotateByPointer(n,r)},Object.defineProperty(t.prototype,"modelViewMatrix",{get:function(){var t=r.create();return r.rotateX(t,t,this.rotation[0]),r.rotateY(t,t,this.rotation[1]),r.rotateZ(t,t,this.rotation[2]-Math.PI),r.translate(t,t,[-this.position[0],-this.position[1],-this.position[2]]),t},enumerable:!0,configurable:!0}),t.prototype.moveByDirection=function(t){if(0!==t.x||0!==t.y||0!==t.z){var e=o.create();e[0]=t.x,e[1]=t.y,e[2]=t.z;var n=r.create();r.rotateY(n,n,this.rotation[1]),o.transformMat4(e,e,n),o.add(this.position,this.position,e)}},t.prototype.rotateByPointer=function(t,e){var n=[e.x-t.x,e.y-t.y];this.rotation[1]+=n[0]*this.rotationSpeed,this.rotation[1]<0&&(this.rotation[1]+=2*Math.PI),this.rotation[1]>=2*Math.PI&&(this.rotation[1]-=2*Math.PI),this.rotation[0]+=n[1]*this.rotationSpeed,this.rotation[0]<.5*-Math.PI&&(this.rotation[0]=.5*-Math.PI),this.rotation[0]>.5*Math.PI&&(this.rotation[0]=.5*Math.PI)},t}(),Qt=function(){function t(){this.changeCallback=function(){return null},this.resizeCallback=function(){return null},this.oldMousePoint={x:0,y:0},this.mousePoint={x:0,y:0},this.keysPress={left:!1,right:!1,front:!1,back:!1,up:!1,down:!1},this.bindEvents()}return t.prototype.bindEvents=function(){var t=this;document.addEventListener("keydown",this.onKeyDown.bind(this)),document.addEventListener("keyup",this.onKeyUp.bind(this)),document.addEventListener("mousemove",this.onMouseMove.bind(this)),window.addEventListener("resize",function(){return t.resizeCallback()})},t.prototype.onChange=function(t){this.changeCallback=t},t.prototype.onResize=function(t){this.resizeCallback=t},t.prototype.onMouseMove=function(t){var e=t.movementX||t.mozMovementX||t.webkitMovementX||0,n=t.movementY||t.mozMovementY||t.webkitMovementY||0;this.mousePoint.x+=e,this.mousePoint.y+=n,this.changeCallback(this.keysPress,this.oldMousePoint,this.mousePoint),this.oldMousePoint.x=this.mousePoint.x=window.innerWidth>>1,this.oldMousePoint.y=this.mousePoint.y=window.innerHeight>>1},t.prototype.onKeyDown=function(t){if(87==t.keyCode||38==t.keyCode)this.keysPress.front=!0;else if(83==t.keyCode||40==t.keyCode)this.keysPress.back=!0;else if(65==t.keyCode||37==t.keyCode)this.keysPress.left=!0;else if(68==t.keyCode||39==t.keyCode)this.keysPress.right=!0;else if(32==t.keyCode)this.keysPress.up=!0;else{if(16!=t.keyCode)return;this.keysPress.down=!0}this.changeCallback(this.keysPress,this.mousePoint,this.mousePoint)},t.prototype.onKeyUp=function(t){if(87==t.keyCode||38==t.keyCode)this.keysPress.front=!1;else if(83==t.keyCode||40==t.keyCode)this.keysPress.back=!1;else if(65==t.keyCode||37==t.keyCode)this.keysPress.left=!1;else if(68==t.keyCode||39==t.keyCode)this.keysPress.right=!1;else if(32==t.keyCode)this.keysPress.up=!1;else{if(16!=t.keyCode)return;this.keysPress.down=!1}this.changeCallback(this.keysPress,this.mousePoint,this.mousePoint)},t}(),Zt=function(){return function(){}}(),Jt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),$t=function(t){function e(e){var n=t.call(this)||this;return n.gl=e,n.buildProgram(),n}return Jt(e,t),e.prototype.buildProgram=function(){var t=this.loadShader(this.gl.VERTEX_SHADER,"\n    attribute vec4 aVertexPosition;\n    attribute vec4 aVertexColor;\n\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    varying lowp vec4 vColor;\n    \n    void main(void) {\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n      vColor = aVertexColor;\n    }\n"),e=this.loadShader(this.gl.FRAGMENT_SHADER,"\n    varying lowp vec4 vColor;\n    \n    void main(void) {\n      gl_FragColor = vColor;\n    }\n"),n=this.gl.createProgram();if(this.gl.attachShader(n,t),this.gl.attachShader(n,e),this.gl.linkProgram(n),!this.gl.getProgramParameter(n,this.gl.LINK_STATUS))throw new Error("Unable to initialize the shader program: "+this.gl.getProgramInfoLog(n));this.program=n,this.attributeLocations={vertexPosition:this.gl.getAttribLocation(n,"aVertexPosition"),vertexColor:this.gl.getAttribLocation(n,"aVertexColor")},this.uniformLocations={projectionMatrix:this.gl.getUniformLocation(n,"uProjectionMatrix"),modelViewMatrix:this.gl.getUniformLocation(n,"uModelViewMatrix")}},e.prototype.loadShader=function(t,e){var n=this.gl.createShader(t);if(this.gl.shaderSource(n,e),this.gl.compileShader(n),!this.gl.getShaderParameter(n,this.gl.COMPILE_STATUS))throw this.gl.deleteShader(n),new Error("An error occurred compiling the shaders: "+this.gl.getShaderInfoLog(n));return n},e}(Zt),te=function(){function t(t,e){this.position={x:0,y:0,z:0},this.buffers={position:null,color:null,indices:null},this.context=t,this.program=e}return t.prototype.translate=function(t,e,n){this.position.x=t,this.position.y=e,this.position.z=n,this.updatePositionBuffer()},t}(),ee=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ne=function(t){function e(e,n,r){var o=t.call(this,e,n)||this;return o.size=r,o.initBuffers(),o}return ee(e,t),e.prototype.draw=function(t){var e=this.context.FLOAT;this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffers.position),this.context.vertexAttribPointer(this.program.attributeLocations.vertexPosition,3,e,!1,0,0),this.context.enableVertexAttribArray(this.program.attributeLocations.vertexPosition);var n=this.context.FLOAT;this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffers.color),this.context.vertexAttribPointer(this.program.attributeLocations.vertexColor,4,n,!1,0,0),this.context.enableVertexAttribArray(this.program.attributeLocations.vertexColor),this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffers.indices);var r=this.context.UNSIGNED_SHORT;this.context.useProgram(this.program.program),this.context.drawElements(this.context.TRIANGLES,36,r,0)},e.prototype.initBuffers=function(){this.updatePositionBuffer(),this.updateColorBuffer(),this.updateIndicesBuffer()},e.prototype.updatePositionBuffer=function(){var t=this.context.createBuffer(),e={x:this.position.x+this.size,y:this.position.y+this.size,z:this.position.z+this.size},n={x:this.position.x,y:this.position.y,z:this.position.z},r=[n.x,n.y,e.z,e.x,n.y,e.z,e.x,e.y,e.z,n.x,e.y,e.z,n.x,n.y,n.z,n.x,e.y,n.z,e.x,e.y,n.z,e.x,n.y,n.z,n.x,e.y,n.z,n.x,e.y,e.z,e.x,e.y,e.z,e.x,e.y,n.z,n.x,n.y,n.z,e.x,n.y,n.z,e.x,n.y,e.z,n.x,n.y,e.z,e.x,n.y,n.z,e.x,e.y,n.z,e.x,e.y,e.z,e.x,n.y,e.z,n.x,n.y,n.z,n.x,n.y,e.z,n.x,e.y,e.z,n.x,e.y,n.z];this.context.bindBuffer(this.context.ARRAY_BUFFER,t),this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(r),this.context.STATIC_DRAW),this.buffers.position=t},e.prototype.updateColorBuffer=function(){for(var t=[[1,1,1,1],[1,0,0,1],[0,1,0,1],[0,0,1,1],[1,1,0,1],[1,0,1,1]],e=[],n=0;n<t.length;++n){var r=t[n];e=e.concat(r,r,r,r)}var o=this.context.createBuffer();this.context.bindBuffer(this.context.ARRAY_BUFFER,o),this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(e),this.context.STATIC_DRAW),this.buffers.color=o},e.prototype.updateIndicesBuffer=function(){var t=this.context.createBuffer();this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,t),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]),this.context.STATIC_DRAW),this.buffers.indices=t},e}(te),re=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),oe=function(t){function e(e,n,r,o){void 0===r&&(r=40),void 0===o&&(o=5);var i=t.call(this,e,n)||this;return i.context=e,i.program=n,i.worldSize=r,i.slotSize=o,i.initialPoint={x:0,y:0,z:0},i.initializeMatrix(),i}return re(e,t),e.prototype.draw=function(t){for(var e=0,n=this.matrix;e<n.length;e++)for(var r=0,o=n[e];r<o.length;r++){o[r].draw(t)}},e.prototype.initBuffers=function(){},e.prototype.updatePositionBuffer=function(){},e.prototype.updateColorBuffer=function(){},e.prototype.updateIndicesBuffer=function(){},e.prototype.initializeMatrix=function(){this.matrix=new Array(this.worldSize);for(var t=0;t<this.worldSize;t++){this.matrix[t]=new Array(this.worldSize);for(var e=0;e<this.worldSize;e++){var n=new ne(this.context,this.program,this.slotSize);n.translate(this.initialPoint.x+t*this.slotSize,this.initialPoint.y,this.initialPoint.z+e*this.slotSize),this.matrix[t][e]=n}}},e}(te);(new(function(){function t(){this.scene=new i,this.program=new $t(this.scene.context),this.camera=new Kt(this.scene.context,this.program),this.surface=new oe(this.scene.context,this.program,30),this.control=new Qt}return t.prototype.init=function(){this.setControls(),this.scene.setCamera(this.camera),this.scene.addObject(this.surface),this.scene.start()},t.prototype.setControls=function(){var t=this;this.control.onChange(function(e,n,r){console.log(n,r),t.camera.control(t.scene.frameTime,e,n,r)}),this.control.onResize(function(){t.scene.configureSize(),t.camera.configure()})},t}())).init()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,