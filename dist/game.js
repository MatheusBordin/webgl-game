!function(t){var e=window.webpackHotUpdate;window.webpackHotUpdate=function(t,i){!function(t,e){if(!v[t]||!M[t])return;for(var i in M[t]=!1,e)Object.prototype.hasOwnProperty.call(e,i)&&(g[i]=e[i]);0==--m&&0===x&&A()}(t,i),e&&e(t,i)};var i,n=!0,r="e37ec6ebc4400d4e520f",o=1e4,s={},a=[],h=[];function c(t){var e=T[t];if(!e)return S;var n=function(n){return e.hot.active?(T[n]?-1===T[n].parents.indexOf(t)&&T[n].parents.push(t):(a=[t],i=n),-1===e.children.indexOf(n)&&e.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+t),a=[]),S(n)},r=function(t){return{configurable:!0,enumerable:!0,get:function(){return S[t]},set:function(e){S[t]=e}}};for(var o in S)Object.prototype.hasOwnProperty.call(S,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(n,o,r(o));return n.e=function(t){return"ready"===l&&d("prepare"),x++,S.e(t).then(e,function(t){throw e(),t});function e(){x--,"prepare"===l&&(b[t]||y(t),0===x&&0===m&&A())}},n.t=function(t,e){return 1&e&&(t=n(t)),S.t(t,-2&e)},n}var u=[],l="idle";function d(t){l=t;for(var e=0;e<u.length;e++)u[e].call(null,t)}var f,g,p,m=0,x=0,b={},M={},v={};function P(t){return+t+""===t?+t:t}function w(t){if("idle"!==l)throw new Error("check() is only allowed in idle status");return n=t,d("check"),function(t){return t=t||1e4,new Promise(function(e,i){if("undefined"==typeof XMLHttpRequest)return i(new Error("No browser support"));try{var n=new XMLHttpRequest,o=S.p+""+r+".hot-update.json";n.open("GET",o,!0),n.timeout=t,n.send(null)}catch(t){return i(t)}n.onreadystatechange=function(){if(4===n.readyState)if(0===n.status)i(new Error("Manifest request to "+o+" timed out."));else if(404===n.status)e();else if(200!==n.status&&304!==n.status)i(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(n.responseText)}catch(t){return void i(t)}e(t)}}})}(o).then(function(t){if(!t)return d("idle"),null;M={},b={},v=t.c,p=t.h,d("prepare");var e=new Promise(function(t,e){f={resolve:t,reject:e}});g={};return y(0),"prepare"===l&&0===x&&0===m&&A(),e})}function y(t){v[t]?(M[t]=!0,m++,function(t){var e=document.getElementsByTagName("head")[0],i=document.createElement("script");i.charset="utf-8",i.src=S.p+""+t+"."+r+".hot-update.js",e.appendChild(i)}(t)):b[t]=!0}function A(){d("ready");var t=f;if(f=null,t)if(n)Promise.resolve().then(function(){return E(n)}).then(function(e){t.resolve(e)},function(e){t.reject(e)});else{var e=[];for(var i in g)Object.prototype.hasOwnProperty.call(g,i)&&e.push(P(i));t.resolve(e)}}function E(e){if("ready"!==l)throw new Error("apply() is only allowed in ready status");var i,n,o,h,c;function u(t){for(var e=[t],i={},n=e.slice().map(function(t){return{chain:[t],id:t}});n.length>0;){var r=n.pop(),o=r.id,s=r.chain;if((h=T[o])&&!h.hot._selfAccepted){if(h.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:o};if(h.hot._main)return{type:"unaccepted",chain:s,moduleId:o};for(var a=0;a<h.parents.length;a++){var c=h.parents[a],u=T[c];if(u){if(u.hot._declinedDependencies[o])return{type:"declined",chain:s.concat([c]),moduleId:o,parentId:c};-1===e.indexOf(c)&&(u.hot._acceptedDependencies[o]?(i[c]||(i[c]=[]),f(i[c],[o])):(delete i[c],e.push(c),n.push({chain:s.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:t,outdatedModules:e,outdatedDependencies:i}}function f(t,e){for(var i=0;i<e.length;i++){var n=e[i];-1===t.indexOf(n)&&t.push(n)}}e=e||{};var m={},x=[],b={},M=function(){console.warn("[HMR] unexpected require("+y.moduleId+") to disposed module")};for(var w in g)if(Object.prototype.hasOwnProperty.call(g,w)){var y;c=P(w);var A=!1,E=!1,C=!1,R="";switch((y=g[w]?u(c):{type:"disposed",moduleId:w}).chain&&(R="\nUpdate propagation: "+y.chain.join(" -> ")),y.type){case"self-declined":e.onDeclined&&e.onDeclined(y),e.ignoreDeclined||(A=new Error("Aborted because of self decline: "+y.moduleId+R));break;case"declined":e.onDeclined&&e.onDeclined(y),e.ignoreDeclined||(A=new Error("Aborted because of declined dependency: "+y.moduleId+" in "+y.parentId+R));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(y),e.ignoreUnaccepted||(A=new Error("Aborted because "+c+" is not accepted"+R));break;case"accepted":e.onAccepted&&e.onAccepted(y),E=!0;break;case"disposed":e.onDisposed&&e.onDisposed(y),C=!0;break;default:throw new Error("Unexception type "+y.type)}if(A)return d("abort"),Promise.reject(A);if(E)for(c in b[c]=g[c],f(x,y.outdatedModules),y.outdatedDependencies)Object.prototype.hasOwnProperty.call(y.outdatedDependencies,c)&&(m[c]||(m[c]=[]),f(m[c],y.outdatedDependencies[c]));C&&(f(x,[y.moduleId]),b[c]=M)}var _,z=[];for(n=0;n<x.length;n++)c=x[n],T[c]&&T[c].hot._selfAccepted&&z.push({module:c,errorHandler:T[c].hot._selfAccepted});d("dispose"),Object.keys(v).forEach(function(t){!1===v[t]&&function(t){delete installedChunks[t]}(t)});for(var k,I,L=x.slice();L.length>0;)if(c=L.pop(),h=T[c]){var B={},O=h.hot._disposeHandlers;for(o=0;o<O.length;o++)(i=O[o])(B);for(s[c]=B,h.hot.active=!1,delete T[c],delete m[c],o=0;o<h.children.length;o++){var F=T[h.children[o]];F&&((_=F.parents.indexOf(c))>=0&&F.parents.splice(_,1))}}for(c in m)if(Object.prototype.hasOwnProperty.call(m,c)&&(h=T[c]))for(I=m[c],o=0;o<I.length;o++)k=I[o],(_=h.children.indexOf(k))>=0&&h.children.splice(_,1);for(c in d("apply"),r=p,b)Object.prototype.hasOwnProperty.call(b,c)&&(t[c]=b[c]);var D=null;for(c in m)if(Object.prototype.hasOwnProperty.call(m,c)&&(h=T[c])){I=m[c];var U=[];for(n=0;n<I.length;n++)if(k=I[n],i=h.hot._acceptedDependencies[k]){if(-1!==U.indexOf(i))continue;U.push(i)}for(n=0;n<U.length;n++){i=U[n];try{i(I)}catch(t){e.onErrored&&e.onErrored({type:"accept-errored",moduleId:c,dependencyId:I[n],error:t}),e.ignoreErrored||D||(D=t)}}}for(n=0;n<z.length;n++){var j=z[n];c=j.module,a=[c];try{S(c)}catch(t){if("function"==typeof j.errorHandler)try{j.errorHandler(t)}catch(i){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:c,error:i,originalError:t}),e.ignoreErrored||D||(D=i),D||(D=t)}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:c,error:t}),e.ignoreErrored||D||(D=t)}}return D?(d("fail"),Promise.reject(D)):(d("idle"),new Promise(function(t){t(x)}))}var T={};function S(e){if(T[e])return T[e].exports;var n=T[e]={i:e,l:!1,exports:{},hot:function(t){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:i!==t,active:!0,accept:function(t,i){if(void 0===t)e._selfAccepted=!0;else if("function"==typeof t)e._selfAccepted=t;else if("object"==typeof t)for(var n=0;n<t.length;n++)e._acceptedDependencies[t[n]]=i||function(){};else e._acceptedDependencies[t]=i||function(){}},decline:function(t){if(void 0===t)e._selfDeclined=!0;else if("object"==typeof t)for(var i=0;i<t.length;i++)e._declinedDependencies[t[i]]=!0;else e._declinedDependencies[t]=!0},dispose:function(t){e._disposeHandlers.push(t)},addDisposeHandler:function(t){e._disposeHandlers.push(t)},removeDisposeHandler:function(t){var i=e._disposeHandlers.indexOf(t);i>=0&&e._disposeHandlers.splice(i,1)},check:w,apply:E,status:function(t){if(!t)return l;u.push(t)},addStatusHandler:function(t){u.push(t)},removeStatusHandler:function(t){var e=u.indexOf(t);e>=0&&u.splice(e,1)},data:s[t]};return i=void 0,e}(e),parents:(h=a,a=[],h),children:[]};return t[e].call(n.exports,n,n.exports,c(e)),n.l=!0,n.exports}S.m=t,S.c=T,S.d=function(t,e,i){S.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},S.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},S.t=function(t,e){if(1&e&&(t=S(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(S.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)S.d(i,n,function(e){return t[e]}.bind(null,n));return i},S.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return S.d(e,"a",e),e},S.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},S.p="",S.h=function(){return r},c(7)(S.s=7)}({7:function(t,e,i){"use strict";i.r(e);var n={};i.r(n),i.d(n,"create",function(){return c}),i.d(n,"clone",function(){return u}),i.d(n,"copy",function(){return l}),i.d(n,"fromValues",function(){return d}),i.d(n,"set",function(){return f}),i.d(n,"identity",function(){return g}),i.d(n,"transpose",function(){return p}),i.d(n,"invert",function(){return m}),i.d(n,"adjoint",function(){return x}),i.d(n,"determinant",function(){return b}),i.d(n,"multiply",function(){return M}),i.d(n,"translate",function(){return v}),i.d(n,"scale",function(){return P}),i.d(n,"rotate",function(){return w}),i.d(n,"rotateX",function(){return y}),i.d(n,"rotateY",function(){return A}),i.d(n,"rotateZ",function(){return E}),i.d(n,"fromTranslation",function(){return T}),i.d(n,"fromScaling",function(){return S}),i.d(n,"fromRotation",function(){return C}),i.d(n,"fromXRotation",function(){return R}),i.d(n,"fromYRotation",function(){return _}),i.d(n,"fromZRotation",function(){return z}),i.d(n,"fromRotationTranslation",function(){return k}),i.d(n,"fromQuat2",function(){return I}),i.d(n,"getTranslation",function(){return L}),i.d(n,"getScaling",function(){return B}),i.d(n,"getRotation",function(){return O}),i.d(n,"fromRotationTranslationScale",function(){return F}),i.d(n,"fromRotationTranslationScaleOrigin",function(){return D}),i.d(n,"fromQuat",function(){return U}),i.d(n,"frustum",function(){return j}),i.d(n,"perspective",function(){return V}),i.d(n,"perspectiveFromFieldOfView",function(){return q}),i.d(n,"ortho",function(){return H}),i.d(n,"lookAt",function(){return N}),i.d(n,"targetTo",function(){return G}),i.d(n,"str",function(){return Y}),i.d(n,"frob",function(){return X}),i.d(n,"add",function(){return W}),i.d(n,"subtract",function(){return K}),i.d(n,"multiplyScalar",function(){return Q}),i.d(n,"multiplyScalarAndAdd",function(){return Z}),i.d(n,"exactEquals",function(){return $}),i.d(n,"equals",function(){return J}),i.d(n,"mul",function(){return tt}),i.d(n,"sub",function(){return et});var r={};i.r(r),i.d(r,"create",function(){return it}),i.d(r,"clone",function(){return nt}),i.d(r,"length",function(){return rt}),i.d(r,"fromValues",function(){return ot}),i.d(r,"copy",function(){return st}),i.d(r,"set",function(){return at}),i.d(r,"add",function(){return ht}),i.d(r,"subtract",function(){return ct}),i.d(r,"multiply",function(){return ut}),i.d(r,"divide",function(){return lt}),i.d(r,"ceil",function(){return dt}),i.d(r,"floor",function(){return ft}),i.d(r,"min",function(){return gt}),i.d(r,"max",function(){return pt}),i.d(r,"round",function(){return mt}),i.d(r,"scale",function(){return xt}),i.d(r,"scaleAndAdd",function(){return bt}),i.d(r,"distance",function(){return Mt}),i.d(r,"squaredDistance",function(){return vt}),i.d(r,"squaredLength",function(){return Pt}),i.d(r,"negate",function(){return wt}),i.d(r,"inverse",function(){return yt}),i.d(r,"normalize",function(){return At}),i.d(r,"dot",function(){return Et}),i.d(r,"cross",function(){return Tt}),i.d(r,"lerp",function(){return St}),i.d(r,"hermite",function(){return Ct}),i.d(r,"bezier",function(){return Rt}),i.d(r,"random",function(){return _t}),i.d(r,"transformMat4",function(){return zt}),i.d(r,"transformMat3",function(){return kt}),i.d(r,"transformQuat",function(){return It}),i.d(r,"rotateX",function(){return Lt}),i.d(r,"rotateY",function(){return Bt}),i.d(r,"rotateZ",function(){return Ot}),i.d(r,"angle",function(){return Ft}),i.d(r,"str",function(){return Dt}),i.d(r,"exactEquals",function(){return Ut}),i.d(r,"equals",function(){return jt}),i.d(r,"sub",function(){return qt}),i.d(r,"mul",function(){return Ht}),i.d(r,"div",function(){return Nt}),i.d(r,"dist",function(){return Gt}),i.d(r,"sqrDist",function(){return Yt}),i.d(r,"len",function(){return Xt}),i.d(r,"sqrLen",function(){return Wt}),i.d(r,"forEach",function(){return Kt});class o{constructor(){this.isVirtualRender=!1,this.prevTime=0,this.objects=[];try{if(this.canvas=document.getElementById("game"),this.gl=this.canvas.getContext("webgl")||this.canvas.getContext("experimental-webgl"),this.requestPointerLock(),this.canvas.addEventListener("click",this.requestPointerLock.bind(this)),this.configureSize(),!this.gl)throw new Error("Unable to initialize WebGL. Your browser or machine may not support it.")}catch(t){console.log(t.message||t)}}get context(){return this.gl}get frameTime(){return this.prevTime}start(){this.render(0)}requestPointerLock(){const t=this.canvas;(t.requestPointerLock||t.webkitRequestPointerLock||t.mozRequestPointerLock||t.msRequestPointerLock||t.oRequestPointerLock||function(){}).call(t)}configureSize(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight}addObject(...t){this.objects.push(...t)}setCamera(t){this.camera=t}render(t){const e=.001*t,i=e-this.prevTime;this.prevTime=e,this.isVirtualRender?this.drawVirtual(i):this.draw(i),requestAnimationFrame(this.render.bind(this))}draw(t){this.gl.clearColor(104/255,203/255,241/255,1),this.gl.clearDepth(1),this.gl.enable(this.gl.DEPTH_TEST),this.gl.depthFunc(this.gl.LEQUAL),this.gl.viewport(0,0,window.innerWidth,window.innerHeight),this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT),this.camera.draw();for(const e of this.objects)e.draw(t)}drawVirtual(t){this.gl.clearColor(104/255,203/255,241/255,1),this.gl.clearDepth(1),this.gl.enable(this.gl.DEPTH_TEST),this.gl.depthFunc(this.gl.LEQUAL),this.gl.viewport(0,0,window.innerWidth,window.innerHeight),this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT),this.camera.drawVirtual();for(const e of this.objects)e.drawVirtual(t)}}var s=1e-6,a="undefined"!=typeof Float32Array?Float32Array:Array,h=Math.random;Math.PI;function c(){var t=new a(16);return a!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function u(t){var e=new a(16);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function l(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function d(t,e,i,n,r,o,s,h,c,u,l,d,f,g,p,m){var x=new a(16);return x[0]=t,x[1]=e,x[2]=i,x[3]=n,x[4]=r,x[5]=o,x[6]=s,x[7]=h,x[8]=c,x[9]=u,x[10]=l,x[11]=d,x[12]=f,x[13]=g,x[14]=p,x[15]=m,x}function f(t,e,i,n,r,o,s,a,h,c,u,l,d,f,g,p,m){return t[0]=e,t[1]=i,t[2]=n,t[3]=r,t[4]=o,t[5]=s,t[6]=a,t[7]=h,t[8]=c,t[9]=u,t[10]=l,t[11]=d,t[12]=f,t[13]=g,t[14]=p,t[15]=m,t}function g(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function p(t,e){if(t===e){var i=e[1],n=e[2],r=e[3],o=e[6],s=e[7],a=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=i,t[6]=e[9],t[7]=e[13],t[8]=n,t[9]=o,t[11]=e[14],t[12]=r,t[13]=s,t[14]=a}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function m(t,e){var i=e[0],n=e[1],r=e[2],o=e[3],s=e[4],a=e[5],h=e[6],c=e[7],u=e[8],l=e[9],d=e[10],f=e[11],g=e[12],p=e[13],m=e[14],x=e[15],b=i*a-n*s,M=i*h-r*s,v=i*c-o*s,P=n*h-r*a,w=n*c-o*a,y=r*c-o*h,A=u*p-l*g,E=u*m-d*g,T=u*x-f*g,S=l*m-d*p,C=l*x-f*p,R=d*x-f*m,_=b*R-M*C+v*S+P*T-w*E+y*A;return _?(_=1/_,t[0]=(a*R-h*C+c*S)*_,t[1]=(r*C-n*R-o*S)*_,t[2]=(p*y-m*w+x*P)*_,t[3]=(d*w-l*y-f*P)*_,t[4]=(h*T-s*R-c*E)*_,t[5]=(i*R-r*T+o*E)*_,t[6]=(m*v-g*y-x*M)*_,t[7]=(u*y-d*v+f*M)*_,t[8]=(s*C-a*T+c*A)*_,t[9]=(n*T-i*C-o*A)*_,t[10]=(g*w-p*v+x*b)*_,t[11]=(l*v-u*w-f*b)*_,t[12]=(a*E-s*S-h*A)*_,t[13]=(i*S-n*E+r*A)*_,t[14]=(p*M-g*P-m*b)*_,t[15]=(u*P-l*M+d*b)*_,t):null}function x(t,e){var i=e[0],n=e[1],r=e[2],o=e[3],s=e[4],a=e[5],h=e[6],c=e[7],u=e[8],l=e[9],d=e[10],f=e[11],g=e[12],p=e[13],m=e[14],x=e[15];return t[0]=a*(d*x-f*m)-l*(h*x-c*m)+p*(h*f-c*d),t[1]=-(n*(d*x-f*m)-l*(r*x-o*m)+p*(r*f-o*d)),t[2]=n*(h*x-c*m)-a*(r*x-o*m)+p*(r*c-o*h),t[3]=-(n*(h*f-c*d)-a*(r*f-o*d)+l*(r*c-o*h)),t[4]=-(s*(d*x-f*m)-u*(h*x-c*m)+g*(h*f-c*d)),t[5]=i*(d*x-f*m)-u*(r*x-o*m)+g*(r*f-o*d),t[6]=-(i*(h*x-c*m)-s*(r*x-o*m)+g*(r*c-o*h)),t[7]=i*(h*f-c*d)-s*(r*f-o*d)+u*(r*c-o*h),t[8]=s*(l*x-f*p)-u*(a*x-c*p)+g*(a*f-c*l),t[9]=-(i*(l*x-f*p)-u*(n*x-o*p)+g*(n*f-o*l)),t[10]=i*(a*x-c*p)-s*(n*x-o*p)+g*(n*c-o*a),t[11]=-(i*(a*f-c*l)-s*(n*f-o*l)+u*(n*c-o*a)),t[12]=-(s*(l*m-d*p)-u*(a*m-h*p)+g*(a*d-h*l)),t[13]=i*(l*m-d*p)-u*(n*m-r*p)+g*(n*d-r*l),t[14]=-(i*(a*m-h*p)-s*(n*m-r*p)+g*(n*h-r*a)),t[15]=i*(a*d-h*l)-s*(n*d-r*l)+u*(n*h-r*a),t}function b(t){var e=t[0],i=t[1],n=t[2],r=t[3],o=t[4],s=t[5],a=t[6],h=t[7],c=t[8],u=t[9],l=t[10],d=t[11],f=t[12],g=t[13],p=t[14],m=t[15];return(e*s-i*o)*(l*m-d*p)-(e*a-n*o)*(u*m-d*g)+(e*h-r*o)*(u*p-l*g)+(i*a-n*s)*(c*m-d*f)-(i*h-r*s)*(c*p-l*f)+(n*h-r*a)*(c*g-u*f)}function M(t,e,i){var n=e[0],r=e[1],o=e[2],s=e[3],a=e[4],h=e[5],c=e[6],u=e[7],l=e[8],d=e[9],f=e[10],g=e[11],p=e[12],m=e[13],x=e[14],b=e[15],M=i[0],v=i[1],P=i[2],w=i[3];return t[0]=M*n+v*a+P*l+w*p,t[1]=M*r+v*h+P*d+w*m,t[2]=M*o+v*c+P*f+w*x,t[3]=M*s+v*u+P*g+w*b,M=i[4],v=i[5],P=i[6],w=i[7],t[4]=M*n+v*a+P*l+w*p,t[5]=M*r+v*h+P*d+w*m,t[6]=M*o+v*c+P*f+w*x,t[7]=M*s+v*u+P*g+w*b,M=i[8],v=i[9],P=i[10],w=i[11],t[8]=M*n+v*a+P*l+w*p,t[9]=M*r+v*h+P*d+w*m,t[10]=M*o+v*c+P*f+w*x,t[11]=M*s+v*u+P*g+w*b,M=i[12],v=i[13],P=i[14],w=i[15],t[12]=M*n+v*a+P*l+w*p,t[13]=M*r+v*h+P*d+w*m,t[14]=M*o+v*c+P*f+w*x,t[15]=M*s+v*u+P*g+w*b,t}function v(t,e,i){var n=i[0],r=i[1],o=i[2],s=void 0,a=void 0,h=void 0,c=void 0,u=void 0,l=void 0,d=void 0,f=void 0,g=void 0,p=void 0,m=void 0,x=void 0;return e===t?(t[12]=e[0]*n+e[4]*r+e[8]*o+e[12],t[13]=e[1]*n+e[5]*r+e[9]*o+e[13],t[14]=e[2]*n+e[6]*r+e[10]*o+e[14],t[15]=e[3]*n+e[7]*r+e[11]*o+e[15]):(s=e[0],a=e[1],h=e[2],c=e[3],u=e[4],l=e[5],d=e[6],f=e[7],g=e[8],p=e[9],m=e[10],x=e[11],t[0]=s,t[1]=a,t[2]=h,t[3]=c,t[4]=u,t[5]=l,t[6]=d,t[7]=f,t[8]=g,t[9]=p,t[10]=m,t[11]=x,t[12]=s*n+u*r+g*o+e[12],t[13]=a*n+l*r+p*o+e[13],t[14]=h*n+d*r+m*o+e[14],t[15]=c*n+f*r+x*o+e[15]),t}function P(t,e,i){var n=i[0],r=i[1],o=i[2];return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*o,t[9]=e[9]*o,t[10]=e[10]*o,t[11]=e[11]*o,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function w(t,e,i,n){var r,o,a,h,c,u,l,d,f,g,p,m,x,b,M,v,P,w,y,A,E,T,S,C,R=n[0],_=n[1],z=n[2],k=Math.sqrt(R*R+_*_+z*z);return k<s?null:(R*=k=1/k,_*=k,z*=k,r=Math.sin(i),a=1-(o=Math.cos(i)),h=e[0],c=e[1],u=e[2],l=e[3],d=e[4],f=e[5],g=e[6],p=e[7],m=e[8],x=e[9],b=e[10],M=e[11],v=R*R*a+o,P=_*R*a+z*r,w=z*R*a-_*r,y=R*_*a-z*r,A=_*_*a+o,E=z*_*a+R*r,T=R*z*a+_*r,S=_*z*a-R*r,C=z*z*a+o,t[0]=h*v+d*P+m*w,t[1]=c*v+f*P+x*w,t[2]=u*v+g*P+b*w,t[3]=l*v+p*P+M*w,t[4]=h*y+d*A+m*E,t[5]=c*y+f*A+x*E,t[6]=u*y+g*A+b*E,t[7]=l*y+p*A+M*E,t[8]=h*T+d*S+m*C,t[9]=c*T+f*S+x*C,t[10]=u*T+g*S+b*C,t[11]=l*T+p*S+M*C,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function y(t,e,i){var n=Math.sin(i),r=Math.cos(i),o=e[4],s=e[5],a=e[6],h=e[7],c=e[8],u=e[9],l=e[10],d=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=o*r+c*n,t[5]=s*r+u*n,t[6]=a*r+l*n,t[7]=h*r+d*n,t[8]=c*r-o*n,t[9]=u*r-s*n,t[10]=l*r-a*n,t[11]=d*r-h*n,t}function A(t,e,i){var n=Math.sin(i),r=Math.cos(i),o=e[0],s=e[1],a=e[2],h=e[3],c=e[8],u=e[9],l=e[10],d=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=o*r-c*n,t[1]=s*r-u*n,t[2]=a*r-l*n,t[3]=h*r-d*n,t[8]=o*n+c*r,t[9]=s*n+u*r,t[10]=a*n+l*r,t[11]=h*n+d*r,t}function E(t,e,i){var n=Math.sin(i),r=Math.cos(i),o=e[0],s=e[1],a=e[2],h=e[3],c=e[4],u=e[5],l=e[6],d=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=o*r+c*n,t[1]=s*r+u*n,t[2]=a*r+l*n,t[3]=h*r+d*n,t[4]=c*r-o*n,t[5]=u*r-s*n,t[6]=l*r-a*n,t[7]=d*r-h*n,t}function T(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function S(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function C(t,e,i){var n,r,o,a=i[0],h=i[1],c=i[2],u=Math.sqrt(a*a+h*h+c*c);return u<s?null:(a*=u=1/u,h*=u,c*=u,n=Math.sin(e),o=1-(r=Math.cos(e)),t[0]=a*a*o+r,t[1]=h*a*o+c*n,t[2]=c*a*o-h*n,t[3]=0,t[4]=a*h*o-c*n,t[5]=h*h*o+r,t[6]=c*h*o+a*n,t[7]=0,t[8]=a*c*o+h*n,t[9]=h*c*o-a*n,t[10]=c*c*o+r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function R(t,e){var i=Math.sin(e),n=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=i,t[7]=0,t[8]=0,t[9]=-i,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function _(t,e){var i=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=0,t[2]=-i,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=i,t[9]=0,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function z(t,e){var i=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=i,t[2]=0,t[3]=0,t[4]=-i,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function k(t,e,i){var n=e[0],r=e[1],o=e[2],s=e[3],a=n+n,h=r+r,c=o+o,u=n*a,l=n*h,d=n*c,f=r*h,g=r*c,p=o*c,m=s*a,x=s*h,b=s*c;return t[0]=1-(f+p),t[1]=l+b,t[2]=d-x,t[3]=0,t[4]=l-b,t[5]=1-(u+p),t[6]=g+m,t[7]=0,t[8]=d+x,t[9]=g-m,t[10]=1-(u+f),t[11]=0,t[12]=i[0],t[13]=i[1],t[14]=i[2],t[15]=1,t}function I(t,e){var i=new a(3),n=-e[0],r=-e[1],o=-e[2],s=e[3],h=e[4],c=e[5],u=e[6],l=e[7],d=n*n+r*r+o*o+s*s;return d>0?(i[0]=2*(h*s+l*n+c*o-u*r)/d,i[1]=2*(c*s+l*r+u*n-h*o)/d,i[2]=2*(u*s+l*o+h*r-c*n)/d):(i[0]=2*(h*s+l*n+c*o-u*r),i[1]=2*(c*s+l*r+u*n-h*o),i[2]=2*(u*s+l*o+h*r-c*n)),k(t,e,i),t}function L(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function B(t,e){var i=e[0],n=e[1],r=e[2],o=e[4],s=e[5],a=e[6],h=e[8],c=e[9],u=e[10];return t[0]=Math.sqrt(i*i+n*n+r*r),t[1]=Math.sqrt(o*o+s*s+a*a),t[2]=Math.sqrt(h*h+c*c+u*u),t}function O(t,e){var i=e[0]+e[5]+e[10],n=0;return i>0?(n=2*Math.sqrt(i+1),t[3]=.25*n,t[0]=(e[6]-e[9])/n,t[1]=(e[8]-e[2])/n,t[2]=(e[1]-e[4])/n):e[0]>e[5]&&e[0]>e[10]?(n=2*Math.sqrt(1+e[0]-e[5]-e[10]),t[3]=(e[6]-e[9])/n,t[0]=.25*n,t[1]=(e[1]+e[4])/n,t[2]=(e[8]+e[2])/n):e[5]>e[10]?(n=2*Math.sqrt(1+e[5]-e[0]-e[10]),t[3]=(e[8]-e[2])/n,t[0]=(e[1]+e[4])/n,t[1]=.25*n,t[2]=(e[6]+e[9])/n):(n=2*Math.sqrt(1+e[10]-e[0]-e[5]),t[3]=(e[1]-e[4])/n,t[0]=(e[8]+e[2])/n,t[1]=(e[6]+e[9])/n,t[2]=.25*n),t}function F(t,e,i,n){var r=e[0],o=e[1],s=e[2],a=e[3],h=r+r,c=o+o,u=s+s,l=r*h,d=r*c,f=r*u,g=o*c,p=o*u,m=s*u,x=a*h,b=a*c,M=a*u,v=n[0],P=n[1],w=n[2];return t[0]=(1-(g+m))*v,t[1]=(d+M)*v,t[2]=(f-b)*v,t[3]=0,t[4]=(d-M)*P,t[5]=(1-(l+m))*P,t[6]=(p+x)*P,t[7]=0,t[8]=(f+b)*w,t[9]=(p-x)*w,t[10]=(1-(l+g))*w,t[11]=0,t[12]=i[0],t[13]=i[1],t[14]=i[2],t[15]=1,t}function D(t,e,i,n,r){var o=e[0],s=e[1],a=e[2],h=e[3],c=o+o,u=s+s,l=a+a,d=o*c,f=o*u,g=o*l,p=s*u,m=s*l,x=a*l,b=h*c,M=h*u,v=h*l,P=n[0],w=n[1],y=n[2],A=r[0],E=r[1],T=r[2],S=(1-(p+x))*P,C=(f+v)*P,R=(g-M)*P,_=(f-v)*w,z=(1-(d+x))*w,k=(m+b)*w,I=(g+M)*y,L=(m-b)*y,B=(1-(d+p))*y;return t[0]=S,t[1]=C,t[2]=R,t[3]=0,t[4]=_,t[5]=z,t[6]=k,t[7]=0,t[8]=I,t[9]=L,t[10]=B,t[11]=0,t[12]=i[0]+A-(S*A+_*E+I*T),t[13]=i[1]+E-(C*A+z*E+L*T),t[14]=i[2]+T-(R*A+k*E+B*T),t[15]=1,t}function U(t,e){var i=e[0],n=e[1],r=e[2],o=e[3],s=i+i,a=n+n,h=r+r,c=i*s,u=n*s,l=n*a,d=r*s,f=r*a,g=r*h,p=o*s,m=o*a,x=o*h;return t[0]=1-l-g,t[1]=u+x,t[2]=d-m,t[3]=0,t[4]=u-x,t[5]=1-c-g,t[6]=f+p,t[7]=0,t[8]=d+m,t[9]=f-p,t[10]=1-c-l,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function j(t,e,i,n,r,o,s){var a=1/(i-e),h=1/(r-n),c=1/(o-s);return t[0]=2*o*a,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*o*h,t[6]=0,t[7]=0,t[8]=(i+e)*a,t[9]=(r+n)*h,t[10]=(s+o)*c,t[11]=-1,t[12]=0,t[13]=0,t[14]=s*o*2*c,t[15]=0,t}function V(t,e,i,n,r){var o=1/Math.tan(e/2),s=void 0;return t[0]=o/i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=r&&r!==1/0?(s=1/(n-r),t[10]=(r+n)*s,t[14]=2*r*n*s):(t[10]=-1,t[14]=-2*n),t}function q(t,e,i,n){var r=Math.tan(e.upDegrees*Math.PI/180),o=Math.tan(e.downDegrees*Math.PI/180),s=Math.tan(e.leftDegrees*Math.PI/180),a=Math.tan(e.rightDegrees*Math.PI/180),h=2/(s+a),c=2/(r+o);return t[0]=h,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=c,t[6]=0,t[7]=0,t[8]=-(s-a)*h*.5,t[9]=(r-o)*c*.5,t[10]=n/(i-n),t[11]=-1,t[12]=0,t[13]=0,t[14]=n*i/(i-n),t[15]=0,t}function H(t,e,i,n,r,o,s){var a=1/(e-i),h=1/(n-r),c=1/(o-s);return t[0]=-2*a,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*h,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*c,t[11]=0,t[12]=(e+i)*a,t[13]=(r+n)*h,t[14]=(s+o)*c,t[15]=1,t}function N(t,e,i,n){var r=void 0,o=void 0,a=void 0,h=void 0,c=void 0,u=void 0,l=void 0,d=void 0,f=void 0,p=void 0,m=e[0],x=e[1],b=e[2],M=n[0],v=n[1],P=n[2],w=i[0],y=i[1],A=i[2];return Math.abs(m-w)<s&&Math.abs(x-y)<s&&Math.abs(b-A)<s?g(t):(l=m-w,d=x-y,f=b-A,r=v*(f*=p=1/Math.sqrt(l*l+d*d+f*f))-P*(d*=p),o=P*(l*=p)-M*f,a=M*d-v*l,(p=Math.sqrt(r*r+o*o+a*a))?(r*=p=1/p,o*=p,a*=p):(r=0,o=0,a=0),h=d*a-f*o,c=f*r-l*a,u=l*o-d*r,(p=Math.sqrt(h*h+c*c+u*u))?(h*=p=1/p,c*=p,u*=p):(h=0,c=0,u=0),t[0]=r,t[1]=h,t[2]=l,t[3]=0,t[4]=o,t[5]=c,t[6]=d,t[7]=0,t[8]=a,t[9]=u,t[10]=f,t[11]=0,t[12]=-(r*m+o*x+a*b),t[13]=-(h*m+c*x+u*b),t[14]=-(l*m+d*x+f*b),t[15]=1,t)}function G(t,e,i,n){var r=e[0],o=e[1],s=e[2],a=n[0],h=n[1],c=n[2],u=r-i[0],l=o-i[1],d=s-i[2],f=u*u+l*l+d*d;f>0&&(u*=f=1/Math.sqrt(f),l*=f,d*=f);var g=h*d-c*l,p=c*u-a*d,m=a*l-h*u;return(f=g*g+p*p+m*m)>0&&(g*=f=1/Math.sqrt(f),p*=f,m*=f),t[0]=g,t[1]=p,t[2]=m,t[3]=0,t[4]=l*m-d*p,t[5]=d*g-u*m,t[6]=u*p-l*g,t[7]=0,t[8]=u,t[9]=l,t[10]=d,t[11]=0,t[12]=r,t[13]=o,t[14]=s,t[15]=1,t}function Y(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function X(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2)+Math.pow(t[9],2)+Math.pow(t[10],2)+Math.pow(t[11],2)+Math.pow(t[12],2)+Math.pow(t[13],2)+Math.pow(t[14],2)+Math.pow(t[15],2))}function W(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t[6]=e[6]+i[6],t[7]=e[7]+i[7],t[8]=e[8]+i[8],t[9]=e[9]+i[9],t[10]=e[10]+i[10],t[11]=e[11]+i[11],t[12]=e[12]+i[12],t[13]=e[13]+i[13],t[14]=e[14]+i[14],t[15]=e[15]+i[15],t}function K(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t[4]=e[4]-i[4],t[5]=e[5]-i[5],t[6]=e[6]-i[6],t[7]=e[7]-i[7],t[8]=e[8]-i[8],t[9]=e[9]-i[9],t[10]=e[10]-i[10],t[11]=e[11]-i[11],t[12]=e[12]-i[12],t[13]=e[13]-i[13],t[14]=e[14]-i[14],t[15]=e[15]-i[15],t}function Q(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*i,t[9]=e[9]*i,t[10]=e[10]*i,t[11]=e[11]*i,t[12]=e[12]*i,t[13]=e[13]*i,t[14]=e[14]*i,t[15]=e[15]*i,t}function Z(t,e,i,n){return t[0]=e[0]+i[0]*n,t[1]=e[1]+i[1]*n,t[2]=e[2]+i[2]*n,t[3]=e[3]+i[3]*n,t[4]=e[4]+i[4]*n,t[5]=e[5]+i[5]*n,t[6]=e[6]+i[6]*n,t[7]=e[7]+i[7]*n,t[8]=e[8]+i[8]*n,t[9]=e[9]+i[9]*n,t[10]=e[10]+i[10]*n,t[11]=e[11]+i[11]*n,t[12]=e[12]+i[12]*n,t[13]=e[13]+i[13]*n,t[14]=e[14]+i[14]*n,t[15]=e[15]+i[15]*n,t}function $(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]}function J(t,e){var i=t[0],n=t[1],r=t[2],o=t[3],a=t[4],h=t[5],c=t[6],u=t[7],l=t[8],d=t[9],f=t[10],g=t[11],p=t[12],m=t[13],x=t[14],b=t[15],M=e[0],v=e[1],P=e[2],w=e[3],y=e[4],A=e[5],E=e[6],T=e[7],S=e[8],C=e[9],R=e[10],_=e[11],z=e[12],k=e[13],I=e[14],L=e[15];return Math.abs(i-M)<=s*Math.max(1,Math.abs(i),Math.abs(M))&&Math.abs(n-v)<=s*Math.max(1,Math.abs(n),Math.abs(v))&&Math.abs(r-P)<=s*Math.max(1,Math.abs(r),Math.abs(P))&&Math.abs(o-w)<=s*Math.max(1,Math.abs(o),Math.abs(w))&&Math.abs(a-y)<=s*Math.max(1,Math.abs(a),Math.abs(y))&&Math.abs(h-A)<=s*Math.max(1,Math.abs(h),Math.abs(A))&&Math.abs(c-E)<=s*Math.max(1,Math.abs(c),Math.abs(E))&&Math.abs(u-T)<=s*Math.max(1,Math.abs(u),Math.abs(T))&&Math.abs(l-S)<=s*Math.max(1,Math.abs(l),Math.abs(S))&&Math.abs(d-C)<=s*Math.max(1,Math.abs(d),Math.abs(C))&&Math.abs(f-R)<=s*Math.max(1,Math.abs(f),Math.abs(R))&&Math.abs(g-_)<=s*Math.max(1,Math.abs(g),Math.abs(_))&&Math.abs(p-z)<=s*Math.max(1,Math.abs(p),Math.abs(z))&&Math.abs(m-k)<=s*Math.max(1,Math.abs(m),Math.abs(k))&&Math.abs(x-I)<=s*Math.max(1,Math.abs(x),Math.abs(I))&&Math.abs(b-L)<=s*Math.max(1,Math.abs(b),Math.abs(L))}var tt=M,et=K;function it(){var t=new a(3);return a!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function nt(t){var e=new a(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function rt(t){var e=t[0],i=t[1],n=t[2];return Math.sqrt(e*e+i*i+n*n)}function ot(t,e,i){var n=new a(3);return n[0]=t,n[1]=e,n[2]=i,n}function st(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function at(t,e,i,n){return t[0]=e,t[1]=i,t[2]=n,t}function ht(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t}function ct(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t}function ut(t,e,i){return t[0]=e[0]*i[0],t[1]=e[1]*i[1],t[2]=e[2]*i[2],t}function lt(t,e,i){return t[0]=e[0]/i[0],t[1]=e[1]/i[1],t[2]=e[2]/i[2],t}function dt(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t}function ft(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t}function gt(t,e,i){return t[0]=Math.min(e[0],i[0]),t[1]=Math.min(e[1],i[1]),t[2]=Math.min(e[2],i[2]),t}function pt(t,e,i){return t[0]=Math.max(e[0],i[0]),t[1]=Math.max(e[1],i[1]),t[2]=Math.max(e[2],i[2]),t}function mt(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t}function xt(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t}function bt(t,e,i,n){return t[0]=e[0]+i[0]*n,t[1]=e[1]+i[1]*n,t[2]=e[2]+i[2]*n,t}function Mt(t,e){var i=e[0]-t[0],n=e[1]-t[1],r=e[2]-t[2];return Math.sqrt(i*i+n*n+r*r)}function vt(t,e){var i=e[0]-t[0],n=e[1]-t[1],r=e[2]-t[2];return i*i+n*n+r*r}function Pt(t){var e=t[0],i=t[1],n=t[2];return e*e+i*i+n*n}function wt(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function yt(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function At(t,e){var i=e[0],n=e[1],r=e[2],o=i*i+n*n+r*r;return o>0&&(o=1/Math.sqrt(o),t[0]=e[0]*o,t[1]=e[1]*o,t[2]=e[2]*o),t}function Et(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function Tt(t,e,i){var n=e[0],r=e[1],o=e[2],s=i[0],a=i[1],h=i[2];return t[0]=r*h-o*a,t[1]=o*s-n*h,t[2]=n*a-r*s,t}function St(t,e,i,n){var r=e[0],o=e[1],s=e[2];return t[0]=r+n*(i[0]-r),t[1]=o+n*(i[1]-o),t[2]=s+n*(i[2]-s),t}function Ct(t,e,i,n,r,o){var s=o*o,a=s*(2*o-3)+1,h=s*(o-2)+o,c=s*(o-1),u=s*(3-2*o);return t[0]=e[0]*a+i[0]*h+n[0]*c+r[0]*u,t[1]=e[1]*a+i[1]*h+n[1]*c+r[1]*u,t[2]=e[2]*a+i[2]*h+n[2]*c+r[2]*u,t}function Rt(t,e,i,n,r,o){var s=1-o,a=s*s,h=o*o,c=a*s,u=3*o*a,l=3*h*s,d=h*o;return t[0]=e[0]*c+i[0]*u+n[0]*l+r[0]*d,t[1]=e[1]*c+i[1]*u+n[1]*l+r[1]*d,t[2]=e[2]*c+i[2]*u+n[2]*l+r[2]*d,t}function _t(t,e){e=e||1;var i=2*h()*Math.PI,n=2*h()-1,r=Math.sqrt(1-n*n)*e;return t[0]=Math.cos(i)*r,t[1]=Math.sin(i)*r,t[2]=n*e,t}function zt(t,e,i){var n=e[0],r=e[1],o=e[2],s=i[3]*n+i[7]*r+i[11]*o+i[15];return s=s||1,t[0]=(i[0]*n+i[4]*r+i[8]*o+i[12])/s,t[1]=(i[1]*n+i[5]*r+i[9]*o+i[13])/s,t[2]=(i[2]*n+i[6]*r+i[10]*o+i[14])/s,t}function kt(t,e,i){var n=e[0],r=e[1],o=e[2];return t[0]=n*i[0]+r*i[3]+o*i[6],t[1]=n*i[1]+r*i[4]+o*i[7],t[2]=n*i[2]+r*i[5]+o*i[8],t}function It(t,e,i){var n=i[0],r=i[1],o=i[2],s=i[3],a=e[0],h=e[1],c=e[2],u=r*c-o*h,l=o*a-n*c,d=n*h-r*a,f=r*d-o*l,g=o*u-n*d,p=n*l-r*u,m=2*s;return u*=m,l*=m,d*=m,f*=2,g*=2,p*=2,t[0]=a+u+f,t[1]=h+l+g,t[2]=c+d+p,t}function Lt(t,e,i,n){var r=[],o=[];return r[0]=e[0]-i[0],r[1]=e[1]-i[1],r[2]=e[2]-i[2],o[0]=r[0],o[1]=r[1]*Math.cos(n)-r[2]*Math.sin(n),o[2]=r[1]*Math.sin(n)+r[2]*Math.cos(n),t[0]=o[0]+i[0],t[1]=o[1]+i[1],t[2]=o[2]+i[2],t}function Bt(t,e,i,n){var r=[],o=[];return r[0]=e[0]-i[0],r[1]=e[1]-i[1],r[2]=e[2]-i[2],o[0]=r[2]*Math.sin(n)+r[0]*Math.cos(n),o[1]=r[1],o[2]=r[2]*Math.cos(n)-r[0]*Math.sin(n),t[0]=o[0]+i[0],t[1]=o[1]+i[1],t[2]=o[2]+i[2],t}function Ot(t,e,i,n){var r=[],o=[];return r[0]=e[0]-i[0],r[1]=e[1]-i[1],r[2]=e[2]-i[2],o[0]=r[0]*Math.cos(n)-r[1]*Math.sin(n),o[1]=r[0]*Math.sin(n)+r[1]*Math.cos(n),o[2]=r[2],t[0]=o[0]+i[0],t[1]=o[1]+i[1],t[2]=o[2]+i[2],t}function Ft(t,e){var i=ot(t[0],t[1],t[2]),n=ot(e[0],e[1],e[2]);At(i,i),At(n,n);var r=Et(i,n);return r>1?0:r<-1?Math.PI:Math.acos(r)}function Dt(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function Ut(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}function jt(t,e){var i=t[0],n=t[1],r=t[2],o=e[0],a=e[1],h=e[2];return Math.abs(i-o)<=s*Math.max(1,Math.abs(i),Math.abs(o))&&Math.abs(n-a)<=s*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(r-h)<=s*Math.max(1,Math.abs(r),Math.abs(h))}var Vt,qt=ct,Ht=ut,Nt=lt,Gt=Mt,Yt=vt,Xt=rt,Wt=Pt,Kt=function(){var t=it();return function(e,i,n,r,o,s){var a=void 0,h=void 0;for(i||(i=3),n||(n=0),h=r?Math.min(r*i+n,e.length):e.length,a=n;a<h;a+=i)t[0]=e[a],t[1]=e[a+1],t[2]=e[a+2],o(t,t,s),e[a]=t[0],e[a+1]=t[1],e[a+2]=t[2];return e}}();class Qt{constructor(t,e,i,o=45*Math.PI/180,s=.1,a=200,h){this.gl=t,this.program=e,this.virtualProgram=i,this.fieldOfView=o,this.zNear=s,this.zFar=a,this.aspect=h,this.position=r.create(),this.rotation=r.create(),this.movementSpeed=500,this.rotationSpeed=.01,this.projectionMatrix=n.create(),this.configure(),this.position[0]=100,this.position[1]=-8,this.position[2]=40}draw(){const t=this.program;this.gl.useProgram(t.program);const e=n.create();n.invert(e,this.modelViewMatrix),n.transpose(e,e),this.gl.uniformMatrix4fv(t.uniformLocations.projectionMatrix,!1,this.projectionMatrix),this.gl.uniformMatrix4fv(t.uniformLocations.modelViewMatrix,!1,this.modelViewMatrix),this.gl.uniformMatrix4fv(t.uniformLocations.normalMatrix,!1,e)}drawVirtual(){const t=this.virtualProgram;this.gl.useProgram(t.program),this.gl.uniformMatrix4fv(t.uniformLocations.projectionMatrix,!1,this.projectionMatrix),this.gl.uniformMatrix4fv(t.uniformLocations.modelViewMatrix,!1,this.modelViewMatrix)}configure(){this.aspect=this.gl.canvas.clientWidth/this.gl.canvas.clientHeight,n.perspective(this.projectionMatrix,this.fieldOfView,this.aspect,this.zNear,this.zFar)}control(t,e,i,n){const r=this.movementSpeed/1e3,o={x:0,y:0,z:0};e.front?o.z-=r:e.back&&(o.z+=r),e.left?o.x+=r:e.right&&(o.x-=r),e.up?o.y-=r:e.down&&(o.y+=r),this.moveByDirection(o),this.rotateByPointer(i,n)}get modelViewMatrix(){const t=n.create();return n.rotateX(t,t,this.rotation[0]),n.rotateY(t,t,this.rotation[1]),n.rotateZ(t,t,this.rotation[2]-Math.PI),n.translate(t,t,[-this.position[0],-this.position[1],-this.position[2]]),t}moveByDirection(t){if(0===t.x&&0===t.y&&0===t.z)return;const e=r.create();e[0]=t.x,e[1]=t.y,e[2]=t.z;var i=n.create();n.rotateY(i,i,this.rotation[1]),r.transformMat4(e,e,i),r.add(this.position,this.position,e)}rotateByPointer(t,e){var i=[e.x-t.x,e.y-t.y];this.rotation[1]+=i[0]*this.rotationSpeed,this.rotation[1]<0&&(this.rotation[1]+=2*Math.PI),this.rotation[1]>=2*Math.PI&&(this.rotation[1]-=2*Math.PI),this.rotation[0]+=i[1]*this.rotationSpeed,this.rotation[0]<.5*-Math.PI&&(this.rotation[0]=.5*-Math.PI),this.rotation[0]>.5*Math.PI&&(this.rotation[0]=.5*Math.PI)}}!function(t){t[t.EARTH=1]="EARTH",t[t.IRON=2]="IRON",t[t.GRASS=3]="GRASS"}(Vt||(Vt={}));const Zt=new class{constructor(){this.current=Vt.GRASS}};class $t{constructor(){this.changeCallback=(()=>null),this.resizeCallback=(()=>null),this.clickCallback=(()=>null),this.rightClickCallback=(()=>null),this.changeCubeCallback=(()=>null),this.oldMousePoint={x:0,y:0},this.mousePoint={x:0,y:0},this.keysPress={left:!1,right:!1,front:!1,back:!1,up:!1,down:!1},this.bindEvents()}bindEvents(){document.addEventListener("keydown",this.onKeyDown.bind(this)),document.addEventListener("keyup",this.onKeyUp.bind(this)),document.addEventListener("mousemove",this.onMouseMove.bind(this)),document.addEventListener("mousedown",t=>{0===t.button?this.clickCallback(t.clientX,t.clientY):this.rightClickCallback(t.clientX,t.clientY)}),window.addEventListener("resize",()=>this.resizeCallback())}onChangeCube(t){this.changeCubeCallback=t}onClick(t){this.clickCallback=t}onRightClick(t){this.rightClickCallback=t}onChange(t){this.changeCallback=t}onResize(t){this.resizeCallback=t}onMouseMove(t){const e=t.movementX||t.mozMovementX||t.webkitMovementX||0,i=t.movementY||t.mozMovementY||t.webkitMovementY||0;this.mousePoint.x+=e,this.mousePoint.y+=i,this.changeCallback(this.keysPress,this.oldMousePoint,this.mousePoint),this.oldMousePoint.x=this.mousePoint.x=window.innerWidth>>1,this.oldMousePoint.y=this.mousePoint.y=window.innerHeight>>1}onKeyDown(t){if(87==t.keyCode||38==t.keyCode)this.keysPress.front=!0;else if(83==t.keyCode||40==t.keyCode)this.keysPress.back=!0;else if(65==t.keyCode||37==t.keyCode)this.keysPress.left=!0;else if(68==t.keyCode||39==t.keyCode)this.keysPress.right=!0;else if(32==t.keyCode)this.keysPress.up=!0;else if(16==t.keyCode)this.keysPress.down=!0;else if(49==t.keyCode)this.changeCubeCallback(Vt.EARTH);else if(50==t.keyCode)this.changeCubeCallback(Vt.IRON);else{if(51!=t.keyCode)return;this.changeCubeCallback(Vt.GRASS)}this.changeCallback(this.keysPress,this.mousePoint,this.mousePoint)}onKeyUp(t){if(87==t.keyCode||38==t.keyCode)this.keysPress.front=!1;else if(83==t.keyCode||40==t.keyCode)this.keysPress.back=!1;else if(65==t.keyCode||37==t.keyCode)this.keysPress.left=!1;else if(68==t.keyCode||39==t.keyCode)this.keysPress.right=!1;else if(32==t.keyCode)this.keysPress.up=!1;else{if(16!=t.keyCode)return;this.keysPress.down=!1}this.changeCallback(this.keysPress,this.mousePoint,this.mousePoint)}}const Jt="\n  varying highp vec2 vTextureCoord;\n  varying highp vec3 vLighting;\n  uniform sampler2D uSampler;\n  \n  void main(void) {\n    highp vec4 texelColor = texture2D(uSampler, vTextureCoord);\n    gl_FragColor = vec4(texelColor.rgb * vLighting, texelColor.a);\n  }\n",te="\n  attribute vec4 aVertexPosition;\n  attribute vec3 aVertexNormal;\n  attribute vec2 aTextureCoord;\n\n  uniform mat4 uNormalMatrix;\n  uniform mat4 uModelViewMatrix;\n  uniform mat4 uProjectionMatrix;\n\n  varying highp vec2 vTextureCoord;\n  varying highp vec3 vLighting;\n\n  void main(void) {\n    gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n    vTextureCoord = aTextureCoord;\n\n    // Apply lighting effect\n    highp vec3 ambientLight = vec3(0.3, 0.3, 0.3);\n    highp vec3 directionalLightColor = vec3(1, 1, 1);\n    highp vec3 directionalVector = normalize(vec3(0.85, 0.8, 0.75));\n\n    highp vec4 transformedNormal = uNormalMatrix * vec4(aVertexNormal, 1.0);\n    \n    highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);\n    vLighting = ambientLight + (directionalLightColor * directional);\n  }\n";class ee{}class ie extends ee{constructor(t){super(),this.gl=t,this.buildProgram()}buildProgram(){const t=this.loadShader(this.gl.VERTEX_SHADER,te),e=this.loadShader(this.gl.FRAGMENT_SHADER,Jt),i=this.gl.createProgram();if(this.gl.attachShader(i,t),this.gl.attachShader(i,e),this.gl.linkProgram(i),!this.gl.getProgramParameter(i,this.gl.LINK_STATUS))throw new Error(`Unable to initialize the shader program: ${this.gl.getProgramInfoLog(i)}`);this.program=i,this.attributeLocations={vertexPosition:this.gl.getAttribLocation(i,"aVertexPosition"),vertexNormal:this.gl.getAttribLocation(i,"aVertexNormal"),textureCoord:this.gl.getAttribLocation(i,"aTextureCoord")},this.uniformLocations={projectionMatrix:this.gl.getUniformLocation(i,"uProjectionMatrix"),modelViewMatrix:this.gl.getUniformLocation(i,"uModelViewMatrix"),normalMatrix:this.gl.getUniformLocation(i,"uNormalMatrix"),uSampler:this.gl.getUniformLocation(i,"uSampler")}}loadShader(t,e){const i=this.gl.createShader(t);if(this.gl.shaderSource(i,e),this.gl.compileShader(i),!this.gl.getShaderParameter(i,this.gl.COMPILE_STATUS))throw this.gl.deleteShader(i),new Error(`An error occurred compiling the shaders: ${this.gl.getShaderInfoLog(i)}`);return i}}class ne{constructor(t){this.red_bits=t.getParameter(t.RED_BITS),this.green_bits=t.getParameter(t.GREEN_BITS),this.blue_bits=t.getParameter(t.BLUE_BITS),this.alpha_bits=t.getParameter(t.ALPHA_BITS),this.total_bits=this.red_bits+this.green_bits+this.blue_bits+this.alpha_bits,this.red_scale=Math.pow(2,this.red_bits),this.green_scale=Math.pow(2,this.green_bits),this.blue_scale=Math.pow(2,this.blue_bits),this.alpha_scale=Math.pow(2,this.alpha_bits),this.red_shift=Math.pow(2,this.green_bits+this.blue_bits+this.alpha_bits),this.green_shift=Math.pow(2,this.blue_bits+this.alpha_bits),this.blue_shift=Math.pow(2,this.alpha_bits)}toColor(t){let e,i,n,r,o=new Float32Array(4);return t-=(e=Math.floor(t/this.red_shift))*this.red_shift,t-=(i=Math.floor(t/this.green_shift))*this.green_shift,r=t-=(n=Math.floor(t/this.blue_shift))*this.blue_shift,o[0]=e/(this.red_scale-1),o[1]=i/(this.green_scale-1),o[2]=n/(this.blue_scale-1),o[3]=r/(this.alpha_scale-1),o}fromColor(t,e,i,n){return t*this.red_shift+e*this.green_shift+i*this.blue_shift+n}}const re=new class{constructor(){this.current=0}next(){return this.current++,this.current}};class oe{constructor(t,e,i){this.position={x:0,y:0,z:0},this.buffers={position:null,texture:null,normal:null,indices:null,color:null},this.context=t,this.program=e,this.virtualProgram=i,this.topId=re.next(),this.bottomId=re.next(),this.frontId=re.next(),this.backId=re.next(),this.leftId=re.next(),this.rightId=re.next(),this.uniqueId=new ne(this.context)}translate(t,e,i){this.position.x=t,this.position.y=e,this.position.z=i,this.updatePositionBuffer()}updateColorBuffer(){const t=this.uniqueId.toColor(this.topId),e=this.uniqueId.toColor(this.bottomId),i=this.uniqueId.toColor(this.rightId),n=this.uniqueId.toColor(this.leftId),r=this.uniqueId.toColor(this.frontId),o=this.uniqueId.toColor(this.backId),s=[[r[0],r[1],r[2],r[3]],[o[0],o[1],o[2],o[3]],[e[0],e[1],e[2],e[3]],[t[0],t[1],t[2],t[3]],[i[0],i[1],i[2],i[3]],[n[0],n[1],n[2],n[3]]];let a=[];for(var h=0;h<s.length;++h){const t=s[h];a=a.concat(t,t,t,t)}const c=this.context.createBuffer();this.context.bindBuffer(this.context.ARRAY_BUFFER,c),this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(a),this.context.STATIC_DRAW),this.buffers.color=c}drawVirtual(t){const e=this.virtualProgram,i=this.context.FLOAT;this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffers.position),this.context.vertexAttribPointer(e.attributeLocations.vertexPosition,3,i,!1,0,0),this.context.enableVertexAttribArray(e.attributeLocations.vertexPosition);const n=this.context.FLOAT;this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffers.color),this.context.vertexAttribPointer(e.attributeLocations.vertexColor,4,n,!1,0,0),this.context.enableVertexAttribArray(e.attributeLocations.vertexColor),this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffers.indices);const r=this.context.UNSIGNED_SHORT;this.context.useProgram(e.program),this.context.drawElements(this.context.TRIANGLES,36,r,0)}}class se{static load(t){const e=t.createTexture();t.bindTexture(t.TEXTURE_2D,e);const i=t.RGBA,n=t.RGBA,r=t.UNSIGNED_BYTE,o=new Uint8Array([0,0,255,255]);t.texImage2D(t.TEXTURE_2D,0,i,1,1,0,n,r,o);const s=new Image;return s.onload=function(){t.bindTexture(t.TEXTURE_2D,e),t.texImage2D(t.TEXTURE_2D,0,i,n,r,s);const o=t=>0==(t&t-1);o(s.width)&&o(s.height)?t.generateMipmap(t.TEXTURE_2D):(t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR))},s.src="/assets/textures/atlas.png",e}static get earthCube(){return[0,0,.25,0,.25,1,0,1]}static get earthAndGrassCube(){return[.25,0,.5,0,.5,1,.25,1]}static get earthAndGrassCubeTwo(){return[.5,0,.5,1,.25,1,.25,0]}static get grassCube(){return[.5,0,.75,0,.75,1,.5,1]}static get darkCube(){return[.75,0,1,0,1,1,.75,1]}}class ae extends oe{constructor(t,e,i,n){super(t,e,i),this.grassArround=!1,this.size=n,this.texture=se.load(t),this.mode=Zt.current,this.initBuffers()}setGrassArround(t){t!==this.grassArround&&(this.grassArround=t,Zt.current===Vt.GRASS&&this.mode===Vt.GRASS&&this.updateTextureBuffer())}draw(t){const e=this.program,i=this.context.FLOAT;this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffers.position),this.context.vertexAttribPointer(e.attributeLocations.vertexPosition,3,i,!1,0,0),this.context.enableVertexAttribArray(e.attributeLocations.vertexPosition);const n=this.context.FLOAT;this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffers.texture),this.context.vertexAttribPointer(e.attributeLocations.textureCoord,2,n,!1,0,0),this.context.enableVertexAttribArray(e.attributeLocations.textureCoord);const r=this.context.FLOAT;this.context.bindBuffer(this.context.ARRAY_BUFFER,this.buffers.normal),this.context.vertexAttribPointer(e.attributeLocations.vertexNormal,3,r,!1,0,0),this.context.enableVertexAttribArray(e.attributeLocations.vertexNormal),this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,this.buffers.indices),this.context.useProgram(e.program),this.context.activeTexture(this.context.TEXTURE0),this.context.bindTexture(this.context.TEXTURE_2D,this.texture),this.context.uniform1i(e.uniformLocations.uSampler,0);const o=this.context.UNSIGNED_SHORT;this.context.drawElements(this.context.TRIANGLES,36,o,0)}initBuffers(){this.updatePositionBuffer(),this.updateNormalBuffer(),this.updateTextureBuffer(),this.updateIndicesBuffer(),this.updateColorBuffer()}updatePositionBuffer(){const t=this.context.createBuffer(),e={x:this.position.x+this.size,y:this.position.y+this.size,z:this.position.z+this.size},i={x:this.position.x,y:this.position.y,z:this.position.z},n=[i.x,i.y,e.z,e.x,i.y,e.z,e.x,e.y,e.z,i.x,e.y,e.z,i.x,i.y,i.z,i.x,e.y,i.z,e.x,e.y,i.z,e.x,i.y,i.z,i.x,e.y,i.z,i.x,e.y,e.z,e.x,e.y,e.z,e.x,e.y,i.z,i.x,i.y,i.z,e.x,i.y,i.z,e.x,i.y,e.z,i.x,i.y,e.z,e.x,i.y,i.z,e.x,e.y,i.z,e.x,e.y,e.z,e.x,i.y,e.z,i.x,i.y,i.z,i.x,i.y,e.z,i.x,e.y,e.z,i.x,e.y,i.z];this.context.bindBuffer(this.context.ARRAY_BUFFER,t),this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(n),this.context.STATIC_DRAW),this.buffers.position=t}updateNormalBuffer(){const t=this.context.createBuffer();this.context.bindBuffer(this.context.ARRAY_BUFFER,t);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0]),this.context.STATIC_DRAW),this.buffers.normal=t}updateTextureBuffer(){const t=this.context.createBuffer();let e;if(this.context.bindBuffer(this.context.ARRAY_BUFFER,t),this.mode===Vt.GRASS){const t=this.grassArround?se.earthAndGrassCube:se.earthCube,i=this.grassArround?se.earthAndGrassCubeTwo:se.earthCube,n=this.grassArround?se.grassCube:se.earthCube;e=[...t,...i,...se.earthCube,...n,...i,...t]}else this.mode===Vt.EARTH?e=[...se.earthCube,...se.earthCube,...se.earthCube,...se.earthCube,...se.earthCube,...se.earthCube]:this.mode===Vt.IRON&&(e=[...se.darkCube,...se.darkCube,...se.darkCube,...se.darkCube,...se.darkCube,...se.darkCube]);this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array(e),this.context.STATIC_DRAW),this.buffers.texture=t}updateIndicesBuffer(){const t=this.context.createBuffer();this.context.bindBuffer(this.context.ELEMENT_ARRAY_BUFFER,t),this.context.bufferData(this.context.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,0,2,3,4,6,7,4,5,6,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]),this.context.STATIC_DRAW),this.buffers.indices=t}}class he{}var ce;!function(t){t[t.FRONT=0]="FRONT",t[t.BACK=1]="BACK",t[t.LEFT=2]="LEFT",t[t.RIGHT=3]="RIGHT",t[t.BOTTOM=4]="BOTTOM",t[t.TOP=5]="TOP"}(ce||(ce={}));var ue=function(t,e,i,n){return new(i||(i=Promise))(function(r,o){function s(t){try{h(n.next(t))}catch(t){o(t)}}function a(t){try{h(n.throw(t))}catch(t){o(t)}}function h(t){t.done?r(t.value):new i(function(e){e(t.value)}).then(s,a)}h((n=n.apply(t,e||[])).next())})};class le extends oe{constructor(t,e,i,n=40,r=5){super(t,e,i),this.context=t,this.program=e,this.virtualProgram=i,this.worldSize=n,this.slotSize=r,this.initialPoint={x:0,y:0,z:0},this.initializeMatrix()}draw(t){for(const e of this.matrix)for(const i of e)for(let e=i.length-1;e>=0;e--){const n=i[e];n instanceof ae&&n.setGrassArround(this.getMaxHeightOfSlot(i)===n.heightPosition),n.draw(t)}}drawVirtual(t){for(const e of this.matrix)for(const i of e)for(let e=i.length-1;e>=0;e--){const n=i[e];n instanceof ae&&n.setGrassArround(e===i.length-1),n.drawVirtual(t)}}addObjectUpTo(t){return ue(this,void 0,void 0,function*(){const e=this.findObjectAndFace(t);if(e)if(e.face===ce.TOP){console.log("top");const t=this.matrix[e.x][e.z],i=new ae(this.context,this.program,this.virtualProgram,this.slotSize);i.heightPosition=e.heightPosition+1,i.translate(this.initialPoint.x+e.x*this.slotSize,this.initialPoint.y-i.heightPosition*this.slotSize,this.initialPoint.z+e.z*this.slotSize),i.updateTextureBuffer(),t.push(i)}else if(e.face===ce.BOTTOM){console.log("bottom");const t=this.matrix[e.x][e.z],i=new ae(this.context,this.program,this.virtualProgram,this.slotSize);i.heightPosition=e.heightPosition-1,i.translate(this.initialPoint.x+e.x*this.slotSize,this.initialPoint.y-i.heightPosition*this.slotSize,this.initialPoint.z+e.z*this.slotSize),i.updateTextureBuffer(),t.push(i)}else if(e.face===ce.LEFT){console.log("left"),e.x--;const t=this.matrix[e.x][e.z],i=new ae(this.context,this.program,this.virtualProgram,this.slotSize);i.heightPosition=e.heightPosition,i.translate(this.initialPoint.x+e.x*this.slotSize,this.initialPoint.y-i.heightPosition*this.slotSize,this.initialPoint.z+e.z*this.slotSize),i.updateTextureBuffer(),t.push(i)}else if(e.face===ce.RIGHT){console.log("right"),e.x++;const t=this.matrix[e.x][e.z],i=new ae(this.context,this.program,this.virtualProgram,this.slotSize);i.heightPosition=e.heightPosition,i.translate(this.initialPoint.x+e.x*this.slotSize,this.initialPoint.y-i.heightPosition*this.slotSize,this.initialPoint.z+e.z*this.slotSize),i.updateTextureBuffer(),t.push(i)}else if(e.face===ce.BACK){console.log("back"),e.z--;const t=this.matrix[e.x][e.z],i=new ae(this.context,this.program,this.virtualProgram,this.slotSize);i.heightPosition=e.heightPosition,i.translate(this.initialPoint.x+e.x*this.slotSize,this.initialPoint.y-i.heightPosition*this.slotSize,this.initialPoint.z+e.z*this.slotSize),i.updateTextureBuffer(),t.push(i)}else if(e.face===ce.FRONT){console.log("front"),e.z++;const t=this.matrix[e.x][e.z],i=new ae(this.context,this.program,this.virtualProgram,this.slotSize);i.heightPosition=e.heightPosition,i.translate(this.initialPoint.x+e.x*this.slotSize,this.initialPoint.y-i.heightPosition*this.slotSize,this.initialPoint.z+e.z*this.slotSize),i.updateTextureBuffer(),t.push(i)}})}findObjectAndFace(t){const e=new he;for(let i=0;i<this.matrix.length;i++){const n=this.matrix[i];for(let r=0;r<n.length;r++){const n=this.matrix[i][r];for(const o of n){if(o.topId===t)return e.x=i,e.z=r,e.object=o,e.heightPosition=o.heightPosition,e.face=ce.TOP,e;if(o.bottomId==t)return e.x=i,e.z=r,e.object=o,e.heightPosition=o.heightPosition,e.face=ce.BOTTOM,e;if(o.frontId==t)return e.x=i,e.z=r,e.object=o,e.heightPosition=o.heightPosition,e.face=ce.FRONT,e;if(o.backId==t)return e.x=i,e.z=r,e.object=o,e.heightPosition=o.heightPosition,e.face=ce.BACK,e;if(o.leftId==t)return e.x=i,e.z=r,e.object=o,e.heightPosition=o.heightPosition,e.face=ce.LEFT,e;if(o.rightId==t)return e.x=i,e.z=r,e.object=o,e.heightPosition=o.heightPosition,e.face=ce.RIGHT,e}}}return null}removeObject(t){return ue(this,void 0,void 0,function*(){const e=this.findObjectAndFace(t);if(!e)return;const i=this.matrix[e.x][e.z],n=i.indexOf(e.object);i.splice(n,1)})}getNextHeightInSlot(t,e=0){const i=t.map(t=>t.heightPosition).filter(t=>t>=e).sort();let n=e+1;for(const t of i)t==n&&(n=t+1);return n}getMaxHeightOfSlot(t){const e=t.map(t=>t.heightPosition).sort();return e[e.length-1]}initBuffers(){}updatePositionBuffer(){}updateColorBuffer(){}updateIndicesBuffer(){}initializeMatrix(){this.matrix=new Array(this.worldSize);for(let t=0;t<this.worldSize;t++){this.matrix[t]=new Array(this.worldSize);for(let e=0;e<this.worldSize;e++){const i=new ae(this.context,this.program,this.virtualProgram,this.slotSize);i.heightPosition=0,i.translate(this.initialPoint.x+t*this.slotSize,this.initialPoint.y,this.initialPoint.z+e*this.slotSize),this.matrix[t][e]=[i]}}this.randomizeSurface()}randomizeSurface(){const t=(t=0)=>Math.floor(Math.random()*(this.worldSize-2*t))+t,e=(t=0)=>Math.floor(Math.random()*(this.worldSize-2*t))+t;for(let i=0;i<5;i++){const i=Math.floor(4*Math.random())+1,n=Math.floor(15*Math.random())+5;this.createMountain(t(i),e(i),i),this.createSurfaces(t(),e(),n)}}createSurfaces(t,e,i){let n=t,r=e;for(;i>0;){const t=Math.floor(3*Math.random())-1;if(r+=Math.floor(3*Math.random())-1,(n+=t)>=this.worldSize||n<0||r>=this.worldSize||r<0)continue;const e=this.matrix[n][r],o=new ae(this.context,this.program,this.virtualProgram,this.slotSize);o.heightPosition=e.length,o.translate(this.initialPoint.x+n*this.slotSize,this.initialPoint.y-o.heightPosition*this.slotSize,this.initialPoint.z+r*this.slotSize),e.push(o),i--}}createMountain(t,e,i){if(!(t-i<0||e-i<0))for(;i>0;){for(let n=-i;n<i;n++)for(let r=-i;r<i;r++){const i=t+n,o=e+r,s=this.matrix[i][o],a=new ae(this.context,this.program,this.virtualProgram,this.slotSize);a.heightPosition=s.length,a.translate(this.initialPoint.x+i*this.slotSize,this.initialPoint.y-a.heightPosition*this.slotSize,this.initialPoint.z+o*this.slotSize),s.push(a)}i--}}}const de="\n    varying lowp vec4 vColor;\n    \n    void main(void) {\n      gl_FragColor = vColor;\n    }\n",fe="\n    attribute vec4 aVertexPosition;\n    attribute vec4 aVertexColor;\n\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    varying lowp vec4 vColor;\n    \n    void main(void) {\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n      vColor = aVertexColor;\n    }\n";class ge extends ee{constructor(t){super(),this.gl=t,this.buildProgram()}buildProgram(){const t=this.loadShader(this.gl.VERTEX_SHADER,fe),e=this.loadShader(this.gl.FRAGMENT_SHADER,de),i=this.gl.createProgram();if(this.gl.attachShader(i,t),this.gl.attachShader(i,e),this.gl.linkProgram(i),!this.gl.getProgramParameter(i,this.gl.LINK_STATUS))throw new Error(`Unable to initialize the shader program: ${this.gl.getProgramInfoLog(i)}`);this.program=i,this.attributeLocations={vertexPosition:this.gl.getAttribLocation(i,"aVertexPosition"),vertexColor:this.gl.getAttribLocation(i,"aVertexColor")},this.uniformLocations={projectionMatrix:this.gl.getUniformLocation(i,"uProjectionMatrix"),modelViewMatrix:this.gl.getUniformLocation(i,"uModelViewMatrix")}}loadShader(t,e){const i=this.gl.createShader(t);if(this.gl.shaderSource(i,e),this.gl.compileShader(i),!this.gl.getShaderParameter(i,this.gl.COMPILE_STATUS))throw this.gl.deleteShader(i),new Error(`An error occurred compiling the shaders: ${this.gl.getShaderInfoLog(i)}`);return i}}(new class{constructor(){this.scene=new o,this.program=new ie(this.scene.context),this.virtualProgram=new ge(this.scene.context),this.camera=new Qt(this.scene.context,this.program,this.virtualProgram),this.surface=new le(this.scene.context,this.program,this.virtualProgram,30),this.control=new $t,this.uniqueId=new ne(this.scene.context),this.cubeModeElement=document.querySelector(".cube-mode")}init(){this.setControls(),this.scene.setCamera(this.camera),this.scene.addObject(this.surface),this.scene.start()}setControls(){this.control.onChange((t,e,i)=>this.camera.control(this.scene.frameTime,t,e,i)),this.control.onResize(()=>{this.scene.configureSize(),this.camera.configure()}),this.control.onRightClick((t,e)=>{const i=document;if((i.pointerLockElement||i.mozPointerLockElement||i.webkitPointerLockElement)!==this.scene.canvas)return;t=window.innerWidth/2,e=window.innerHeight/2,this.scene.isVirtualRender=!0,this.scene.drawVirtual(0),e=this.scene.canvas.clientHeight-e;const n=new Uint8Array(4);this.scene.context.readPixels(t,e,1,1,this.scene.context.RGBA,this.scene.context.UNSIGNED_BYTE,n);const r=this.uniqueId.fromColor(n[0],n[1],n[2],n[3]);this.surface.addObjectUpTo(r),this.scene.isVirtualRender=!1,this.scene.draw(0)}),this.control.onClick((t,e)=>{const i=document;if((i.pointerLockElement||i.mozPointerLockElement||i.webkitPointerLockElement)!==this.scene.canvas)return;t=window.innerWidth/2,e=window.innerHeight/2,this.scene.isVirtualRender=!0,this.scene.drawVirtual(0),e=this.scene.canvas.clientHeight-e;const n=new Uint8Array(4);this.scene.context.readPixels(t,e,1,1,this.scene.context.RGBA,this.scene.context.UNSIGNED_BYTE,n);const r=this.uniqueId.fromColor(n[0],n[1],n[2],n[3]);this.surface.removeObject(r),this.scene.isVirtualRender=!1,this.scene.draw(0)}),this.control.onChangeCube(t=>{Zt.current=t,t===Vt.GRASS?this.cubeModeElement.innerText="Grass":t===Vt.EARTH?this.cubeModeElement.innerText="Earth":this.cubeModeElement.innerText="Iron"})}}).init()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,